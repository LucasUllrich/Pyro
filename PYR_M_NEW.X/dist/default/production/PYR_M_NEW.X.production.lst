

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Dec 25 20:10:12 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataBANK1
    43  000B0A                     __pidataBANK1:
    44                           	opt stack 0
    45                           
    46                           ;initializer for _pin
    47  000B0A  00                 	db	0
    48  000B0B  00                 	db	0
    49  000B0C  00                 	db	0
    50  000B0D  1F                 	db	31
    51  000B0E  00                 	db	0
    52  000B0F  00                 	db	0
    53  000B10  00                 	db	0
    54  000B11  01                 	db	1
    55  000B12  01                 	db	1
    56  000B13  1E                 	db	30
    57  000B14  00                 	db	0
    58  000B15  00                 	db	0
    59  000B16  00                 	db	0
    60  000B17  02                 	db	2
    61  000B18  02                 	db	2
    62  000B19  1D                 	db	29
    63  000B1A  00                 	db	0
    64  000B1B  00                 	db	0
    65  000B1C  00                 	db	0
    66  000B1D  03                 	db	3
    67  000B1E  03                 	db	3
    68  000B1F  1C                 	db	28
    69  000B20  00                 	db	0
    70  000B21  00                 	db	0
    71  000B22  00                 	db	0
    72  000B23  04                 	db	4
    73  000B24  04                 	db	4
    74  000B25  1B                 	db	27
    75  000B26  00                 	db	0
    76  000B27  00                 	db	0
    77  000B28  00                 	db	0
    78  000B29  05                 	db	5
    79  000B2A  05                 	db	5
    80  000B2B  1A                 	db	26
    81  000B2C  00                 	db	0
    82  000B2D  00                 	db	0
    83  000B2E  00                 	db	0
    84  000B2F  06                 	db	6
    85  000B30  06                 	db	6
    86  000B31  19                 	db	25
    87  000B32  00                 	db	0
    88  000B33  00                 	db	0
    89  000B34  00                 	db	0
    90  000B35  07                 	db	7
    91  000B36  07                 	db	7
    92  000B37  18                 	db	24
    93  000B38  00                 	db	0
    94  000B39  00                 	db	0
    95  000B3A  00                 	db	0
    96  000B3B  08                 	db	8
    97  000B3C  08                 	db	8
    98  000B3D  27                 	db	39
    99  000B3E  00                 	db	0
   100  000B3F  00                 	db	0
   101  000B40  00                 	db	0
   102  000B41  09                 	db	9
   103  000B42  09                 	db	9
   104  000B43  26                 	db	38
   105  000B44  00                 	db	0
   106  000B45  00                 	db	0
   107  000B46  01                 	db	1
   108  000B47  00                 	db	0
   109  000B48  0A                 	db	10
   110  000B49  25                 	db	37
   111  000B4A  00                 	db	0
   112  000B4B  00                 	db	0
   113  000B4C  01                 	db	1
   114  000B4D  01                 	db	1
   115  000B4E  0B                 	db	11
   116  000B4F  24                 	db	36
   117  000B50  00                 	db	0
   118  000B51  00                 	db	0
   119  000B52  01                 	db	1
   120  000B53  02                 	db	2
   121  000B54  0C                 	db	12
   122  000B55  23                 	db	35
   123  000B56  00                 	db	0
   124  000B57  00                 	db	0
   125  000B58  01                 	db	1
   126  000B59  03                 	db	3
   127  000B5A  0D                 	db	13
   128  000B5B  22                 	db	34
   129  000B5C  00                 	db	0
   130  000B5D  00                 	db	0
   131  000B5E  01                 	db	1
   132  000B5F  04                 	db	4
   133  000B60  0E                 	db	14
   134  000B61  21                 	db	33
   135  000B62  00                 	db	0
   136  000B63  00                 	db	0
   137  000B64  01                 	db	1
   138  000B65  05                 	db	5
   139  000B66  0F                 	db	15
   140  000B67  20                 	db	32
   141  000B68  00                 	db	0
   142  000B69  00                 	db	0
   143  000B6A  01                 	db	1
   144  000B6B  06                 	db	6
   145  000B6C  10                 	db	16
   146  000B6D  2F                 	db	47
   147  000B6E  00                 	db	0
   148  000B6F  00                 	db	0
   149  000B70  01                 	db	1
   150  000B71  07                 	db	7
   151  000B72  11                 	db	17
   152  000B73  2E                 	db	46
   153  000B74  00                 	db	0
   154  000B75  00                 	db	0
   155  000B76  01                 	db	1
   156  000B77  08                 	db	8
   157  000B78  12                 	db	18
   158  000B79  2D                 	db	45
   159  000B7A  00                 	db	0
   160  000B7B  00                 	db	0
   161  000B7C  01                 	db	1
   162  000B7D  09                 	db	9
   163  000B7E  13                 	db	19
   164  000B7F  2C                 	db	44
   165  000B80  00                 	db	0
   166  000B81  00                 	db	0
   167  000B82  02                 	db	2
   168  000B83  00                 	db	0
   169  000B84  14                 	db	20
   170  000B85  2B                 	db	43
   171  000B86  00                 	db	0
   172  000B87  00                 	db	0
   173  000B88  02                 	db	2
   174  000B89  01                 	db	1
   175  000B8A  15                 	db	21
   176  000B8B  2A                 	db	42
   177  000B8C  00                 	db	0
   178  000B8D  00                 	db	0
   179  000B8E  02                 	db	2
   180  000B8F  02                 	db	2
   181  000B90  16                 	db	22
   182  000B91  29                 	db	41
   183  000B92  00                 	db	0
   184  000B93  00                 	db	0
   185  000B94  02                 	db	2
   186  000B95  03                 	db	3
   187  000B96  17                 	db	23
   188  000B97  28                 	db	40
   189  000B98  00                 	db	0
   190  000B99  00                 	db	0
   191  000B9A  02                 	db	2
   192  000B9B  04                 	db	4
   193  000B9C  18                 	db	24
   194  000B9D  35                 	db	53
   195  000B9E  00                 	db	0
   196  000B9F  00                 	db	0
   197  000BA0  02                 	db	2
   198  000BA1  05                 	db	5
   199  000BA2  19                 	db	25
   200  000BA3  34                 	db	52
   201  000BA4  00                 	db	0
   202  000BA5  00                 	db	0
   203  000BA6  02                 	db	2
   204  000BA7  06                 	db	6
   205  000BA8  1A                 	db	26
   206  000BA9  33                 	db	51
   207  000BAA  00                 	db	0
   208  000BAB  00                 	db	0
   209  000BAC  02                 	db	2
   210  000BAD  07                 	db	7
   211  000BAE  1B                 	db	27
   212  000BAF  32                 	db	50
   213  000BB0  00                 	db	0
   214  000BB1  00                 	db	0
   215  000BB2  02                 	db	2
   216  000BB3  08                 	db	8
   217  000BB4  1C                 	db	28
   218  000BB5  31                 	db	49
   219  000BB6  00                 	db	0
   220  000BB7  00                 	db	0
   221  000BB8  02                 	db	2
   222  000BB9  09                 	db	9
   223  000BBA  1D                 	db	29
   224  000BBB  30                 	db	48
   225  000BBC  00                 	db	0
   226  000BBD  00                 	db	0
   227  0000                     _ANSELA	set	3896
   228  0000                     _ANSELB	set	3897
   229  0000                     _ANSELC	set	3898
   230  0000                     _CCPTMRS0bits	set	3913
   231  0000                     _BAUDCON1bits	set	4024
   232  0000                     _CCP1CONbits	set	4029
   233  0000                     _CCPR1H	set	4031
   234  0000                     _CCPR1L	set	4030
   235  0000                     _EEADR	set	4009
   236  0000                     _EECON1bits	set	4006
   237  0000                     _EECON2	set	4007
   238  0000                     _EEDATA	set	4008
   239  0000                     _INTCONbits	set	4082
   240  0000                     _OSCCON	set	4051
   241  0000                     _PIE1bits	set	3997
   242  0000                     _PIR1bits	set	3998
   243  0000                     _PIR2bits	set	4001
   244  0000                     _PORTA	set	3968
   245  0000                     _PORTB	set	3969
   246  0000                     _PORTBbits	set	3969
   247  0000                     _PORTC	set	3970
   248  0000                     _PORTCbits	set	3970
   249  0000                     _PORTE	set	3972
   250  0000                     _RCREG1	set	4014
   251  0000                     _RCSTA1bits	set	4011
   252  0000                     _RCSTAbits	set	4011
   253  0000                     _SPBRG1	set	4015
   254  0000                     _SSP1BUF	set	4041
   255  0000                     _SSP1CON1	set	4038
   256  0000                     _SSP1STAT	set	4039
   257  0000                     _T1CONbits	set	4045
   258  0000                     _T3CONbits	set	4017
   259  0000                     _TMR1H	set	4047
   260  0000                     _TMR1L	set	4046
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _TRISCbits	set	3988
   265  0000                     _TRISE	set	3990
   266  0000                     _TXREG1	set	4013
   267  0000                     _TXSTA1bits	set	4012
   268  0000                     _SSP1IF	set	31987
   269                           
   270                           	psect	smallconst
   271  000200                     __psmallconst:
   272                           	opt stack 0
   273  000200  00                 	db	0
   274  000201                     STR_11:
   275  000201  41                 	db	65	;'A'
   276  000202  42                 	db	66	;'B'
   277  000203  43                 	db	67	;'C'
   278  000204  44                 	db	68	;'D'
   279  000205  45                 	db	69	;'E'
   280  000206  46                 	db	70	;'F'
   281  000207  47                 	db	71	;'G'
   282  000208  00                 	db	0
   283  000209                     STR_3:
   284  000209  41                 	db	65	;'A'
   285  00020A  42                 	db	66	;'B'
   286  00020B  43                 	db	67	;'C'
   287  00020C  44                 	db	68	;'D'
   288  00020D  45                 	db	69	;'E'
   289  00020E  46                 	db	70	;'F'
   290  00020F  00                 	db	0
   291  000210                     STR_12:
   292  000210  41                 	db	65	;'A'
   293  000211  42                 	db	66	;'B'
   294  000212  43                 	db	67	;'C'
   295  000213  44                 	db	68	;'D'
   296  000214  46                 	db	70	;'F'
   297  000215  47                 	db	71	;'G'
   298  000216  00                 	db	0
   299  000217                     STR_14:
   300  000217  41                 	db	65	;'A'
   301  000218  42                 	db	66	;'B'
   302  000219  43                 	db	67	;'C'
   303  00021A  45                 	db	69	;'E'
   304  00021B  46                 	db	70	;'F'
   305  00021C  47                 	db	71	;'G'
   306  00021D  00                 	db	0
   307  00021E                     STR_9:
   308  00021E  41                 	db	65	;'A'
   309  00021F  43                 	db	67	;'C'
   310  000220  44                 	db	68	;'D'
   311  000221  45                 	db	69	;'E'
   312  000222  46                 	db	70	;'F'
   313  000223  47                 	db	71	;'G'
   314  000224  00                 	db	0
   315  000225                     STR_6:
   316  000225  41                 	db	65	;'A'
   317  000226  42                 	db	66	;'B'
   318  000227  43                 	db	67	;'C'
   319  000228  44                 	db	68	;'D'
   320  000229  47                 	db	71	;'G'
   321  00022A  00                 	db	0
   322  00022B                     STR_5:
   323  00022B  41                 	db	65	;'A'
   324  00022C  42                 	db	66	;'B'
   325  00022D  44                 	db	68	;'D'
   326  00022E  45                 	db	69	;'E'
   327  00022F  47                 	db	71	;'G'
   328  000230  00                 	db	0
   329  000231                     STR_8:
   330  000231  41                 	db	65	;'A'
   331  000232  43                 	db	67	;'C'
   332  000233  44                 	db	68	;'D'
   333  000234  46                 	db	70	;'F'
   334  000235  47                 	db	71	;'G'
   335  000236  00                 	db	0
   336  000237                     STR_13:
   337  000237  41                 	db	65	;'A'
   338  000238  44                 	db	68	;'D'
   339  000239  45                 	db	69	;'E'
   340  00023A  46                 	db	70	;'F'
   341  00023B  47                 	db	71	;'G'
   342  00023C  00                 	db	0
   343  00023D                     STR_7:
   344  00023D  42                 	db	66	;'B'
   345  00023E  43                 	db	67	;'C'
   346  00023F  46                 	db	70	;'F'
   347  000240  47                 	db	71	;'G'
   348  000241  00                 	db	0
   349  000242                     STR_10:
   350  000242  41                 	db	65	;'A'
   351  000243  42                 	db	66	;'B'
   352  000244  43                 	db	67	;'C'
   353  000245  00                 	db	0
   354  000246                     STR_1:
   355  000246  4C                 	db	76	;'L'
   356  000247  4F                 	db	79	;'O'
   357  000248  41                 	db	65	;'A'
   358  000249  00                 	db	0
   359  00024A                     STR_2:
   360  00024A  44                 	db	68	;'D'
   361  00024B  45                 	db	69	;'E'
   362  00024C  4C                 	db	76	;'L'
   363  00024D  00                 	db	0
   364  0000                     
   365                           ; #config settings
   366  00024E  00                 	db	0	; dummy byte at the end
   367  0000                     
   368                           	psect	cinit
   369  000E5A                     __pcinit:
   370                           	opt stack 0
   371  000E5A                     start_initialization:
   372                           	opt stack 0
   373  000E5A                     __initialization:
   374                           	opt stack 0
   375                           
   376                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   377  000E5A  6A42               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   378                           
   379                           ; Clear objects allocated to COMRAM (22 bytes)
   380  000E5C  EE00  F02C         	lfsr	0,__pbssCOMRAM
   381  000E60  0E16               	movlw	22
   382  000E62                     clear_0:
   383  000E62  6AEE               	clrf	postinc0,c
   384  000E64  06E8               	decf	wreg,f,c
   385  000E66  E1FD               	bnz	clear_0
   386                           
   387                           ; Initialize objects allocated to BANK1 (180 bytes)
   388                           ; load TBLPTR registers with __pidataBANK1
   389  000E68  0E0A               	movlw	low __pidataBANK1
   390  000E6A  6EF6               	movwf	tblptrl,c
   391  000E6C  0E0B               	movlw	high __pidataBANK1
   392  000E6E  6EF7               	movwf	tblptrh,c
   393  000E70  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   394  000E72  6EF8               	movwf	tblptru,c
   395  000E74  EE01  F000         	lfsr	0,__pdataBANK1
   396  000E78  EE10 F0B4          	lfsr	1,180
   397  000E7C                     copy_data0:
   398  000E7C  0009               	tblrd		*+
   399  000E7E  CFF5 FFEE          	movff	tablat,postinc0
   400  000E82  50E5               	movf	postdec1,w,c
   401  000E84  50E1               	movf	fsr1l,w,c
   402  000E86  E1FA               	bnz	copy_data0
   403  000E88                     end_of_initialization:
   404                           	opt stack 0
   405  000E88                     __end_of__initialization:
   406                           	opt stack 0
   407  000E88  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   408  000E8A  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   409  000E8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  000E8E  6EF8               	movwf	tblptru,c
   411  000E90  0100               	movlb	0
   412  000E92  EF4B  F007         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	bitbssCOMRAM
   423  000210                     __pbitbssCOMRAM:
   424                           	opt stack 0
   425  000210                     _ignite_ready:
   426                           	opt stack 0
   427  000210                     	ds	1
   428  000211                     _master_addressed:
   429                           	opt stack 0
   430  000211                     	ds	1
   431  000212                     _testflag:
   432                           	opt stack 0
   433  000212                     	ds	1
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	bssCOMRAM
   444  00002C                     __pbssCOMRAM:
   445                           	opt stack 0
   446  00002C                     _received:
   447                           	opt stack 0
   448  00002C                     	ds	5
   449  000031                     _current_time:
   450                           	opt stack 0
   451  000031                     	ds	2
   452  000033                     _display_counter:
   453                           	opt stack 0
   454  000033                     	ds	1
   455  000034                     _overrun:
   456                           	opt stack 0
   457  000034                     	ds	1
   458  000035                     _pin_selected:
   459                           	opt stack 0
   460  000035                     	ds	1
   461  000036                     _receive_counter:
   462                           	opt stack 0
   463  000036                     	ds	1
   464  000037                     _slave_selected:
   465                           	opt stack 0
   466  000037                     	ds	1
   467  000038                     _pixels:
   468                           	opt stack 0
   469  000038                     	ds	7
   470  00003F                     _signs:
   471                           	opt stack 0
   472  00003F                     	ds	3
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	dataBANK1
   483  000100                     __pdataBANK1:
   484                           	opt stack 0
   485  000100                     _pin:
   486                           	opt stack 0
   487  000100                     	ds	180
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	cstackBANK0
   498  000060                     __pcstackBANK0:
   499                           	opt stack 0
   500  000060                     Evaluate_Signs@valuecounter:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x0
   504  000060                     	ds	1
   505  000061                     Set_Display@information:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x1
   509  000061                     	ds	1
   510  000062                     Set_Display@value:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x2
   514  000062                     	ds	2
   515  000064                     Set_Display@type:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x4
   519  000064                     	ds	1
   520  000065                     ??_Load_Data:
   521                           
   522                           ; 0 bytes @ 0x5
   523  000065                     	ds	1
   524  000066                     Load_Data@counter:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x6
   528  000066                     	ds	1
   529  000067                     Del_Data@counter:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x7
   533  000067                     	ds	1
   534  000068                     ??_Check_Buttons:
   535                           
   536                           ; 0 bytes @ 0x8
   537  000068                     	ds	2
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	cstackCOMRAM
   548  000001                     __pcstackCOMRAM:
   549                           	opt stack 0
   550  000001                     ?___awdiv:
   551                           	opt stack 0
   552  000001                     ___awdiv@dividend:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x0
   556  000001                     	ds	2
   557  000003                     ___awdiv@divisor:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2
   561  000003                     	ds	2
   562  000005                     ___awdiv@counter:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x4
   566  000005                     	ds	1
   567  000006                     ___awdiv@sign:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x5
   571  000006                     	ds	1
   572  000007                     ___awdiv@quotient:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x6
   576  000007                     	ds	2
   577  000009                     ??_Isr:
   578                           
   579                           ; 0 bytes @ 0x8
   580  000009                     	ds	17
   581  00001A                     Isr@pixel_index_array:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x19
   585  00001A                     	ds	1
   586  00001B                     Isr@pixel_index_bit:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x1A
   590  00001B                     	ds	1
   591  00001C                     Isr@search_index:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x1B
   595  00001C                     	ds	1
   596  00001D                     ??_Delay_Routine:
   597  00001D                     ?_Read_Data:
   598                           	opt stack 0
   599  00001D                     ?___lwmod:
   600                           	opt stack 0
   601  00001D                     Save_Data@store:
   602                           	opt stack 0
   603  00001D                     Write_Display_Byte@write_data:
   604                           	opt stack 0
   605  00001D                     ___lwmod@dividend:
   606                           	opt stack 0
   607  00001D                     Set_Bits@bits:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x1C
   611  00001D                     	ds	1
   612  00001E                     Delay_Routine@delay_multiplyer:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x1D
   616  00001E                     	ds	1
   617  00001F                     ??_Write_Display_Byte:
   618  00001F                     Delay_Routine@delay_counter:
   619                           	opt stack 0
   620  00001F                     Save_Data@store_address:
   621                           	opt stack 0
   622  00001F                     Read_Data@data_read:
   623                           	opt stack 0
   624  00001F                     ___lwmod@divisor:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x1E
   628  00001F                     	ds	1
   629  000020                     ??_Set_Bits:
   630                           
   631                           ; 0 bytes @ 0x1F
   632  000020                     	ds	1
   633  000021                     Read_Data@read_address:
   634                           	opt stack 0
   635  000021                     ___lwmod@counter:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x20
   639  000021                     	ds	2
   640  000023                     Set_Bits@bitcount:
   641                           	opt stack 0
   642  000023                     Write_Display_Byte@counter:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x22
   646  000023                     	ds	1
   647  000024                     Set_Bits@Bitoutput:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x23
   651  000024                     	ds	1
   652  000025                     Evaluate_Display@evaluate:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x24
   656  000025                     	ds	2
   657  000027                     ??_Evaluate_Display:
   658                           
   659                           ; 0 bytes @ 0x26
   660  000027                     	ds	2
   661  000029                     Evaluate_Display@size:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x28
   665  000029                     	ds	1
   666  00002A                     Evaluate_Signs@evaluation_value:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x29
   670  00002A                     	ds	2
   671  00002C                     tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           ; 0 bytes @ 0x2B
   681 ;;
   682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   683 ;;
   684 ;; *************** function _main *****************
   685 ;; Defined at:
   686 ;;		line 86 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;		None
   691 ;; Return value:  Size  Location     Type
   692 ;;		None               void
   693 ;; Registers used:
   694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1
   700 ;;      Params:         0       0       0
   701 ;;      Locals:         0       0       0
   702 ;;      Temps:          0       0       0
   703 ;;      Totals:         0       0       0
   704 ;;Total ram usage:        0 bytes
   705 ;; Hardware stack levels required when called:    9
   706 ;; This function calls:
   707 ;;		_Check_Buttons
   708 ;;		_Check_Detonators
   709 ;;		_Init
   710 ;;		_Load_Data
   711 ;;		_Set_Display
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text0
   718  000E96                     __ptext0:
   719                           	opt stack 0
   720  000E96                     _main:
   721                           	opt stack 22
   722                           
   723                           ;main.c: 87: Init();
   724                           
   725                           ;incstack = 0
   726  000E96  EC99  F007         	call	_Init	;wreg free
   727                           
   728                           ;main.c: 88: Load_Data();
   729  000E9A  ECAA  F004         	call	_Load_Data	;wreg free
   730  000E9E                     l2663:
   731                           
   732                           ;main.c: 90: Check_Buttons();
   733  000E9E  EC28  F001         	call	_Check_Buttons	;wreg free
   734                           
   735                           ;main.c: 91: if(testflag == 1) {
   736  000EA2  A442               	btfss	_testflag/(0+8),_testflag& (0+7),c
   737  000EA4  D7FC               	goto	l2663
   738                           
   739                           ;main.c: 92: Set_Display('7', 'T',0);
   740  000EA6  0E54               	movlw	84
   741  000EA8  0100               	movlb	0	; () banked
   742  000EAA  6F61               	movwf	Set_Display@information& (0+255),b
   743  000EAC  0E00               	movlw	0
   744  000EAE  0100               	movlb	0	; () banked
   745  000EB0  6F63               	movwf	(Set_Display@value+1)& (0+255),b
   746  000EB2  0E00               	movlw	0
   747  000EB4  6F62               	movwf	Set_Display@value& (0+255),b
   748  000EB6  0E37               	movlw	55
   749  000EB8  EC58  F006         	call	_Set_Display
   750                           
   751                           ;main.c: 93: Check_Detonators();
   752  000EBC  ECD4  F007         	call	_Check_Detonators	;wreg free
   753  000EC0  D7EE               	goto	l2663
   754  000EC2                     __end_of_main:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765 ;; *************** function _Init *****************
   766 ;; Defined at:
   767 ;;		line 3 in file "init.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, status,2, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1
   781 ;;      Params:         0       0       0
   782 ;;      Locals:         0       0       0
   783 ;;      Temps:          0       0       0
   784 ;;      Totals:         0       0       0
   785 ;;Total ram usage:        0 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    3
   788 ;; This function calls:
   789 ;;		_InitAnsel
   790 ;;		_InitInterrupt
   791 ;;		_InitMiscellaneous
   792 ;;		_InitPort
   793 ;;		_InitTimer
   794 ;;		_InitTransmission
   795 ;;		_InitTris
   796 ;; This function is called by:
   797 ;;		_main
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           	psect	text1
   802  000F32                     __ptext1:
   803                           	opt stack 0
   804  000F32                     _Init:
   805                           	opt stack 27
   806                           
   807                           ;init.c: 4: InitPort();
   808                           
   809                           ;incstack = 0
   810  000F32  ECBB  F007         	call	_InitPort	;wreg free
   811                           
   812                           ;init.c: 5: InitTris();
   813  000F36  ECB2  F007         	call	_InitTris	;wreg free
   814                           
   815                           ;init.c: 6: InitAnsel();
   816  000F3A  ECA8  F007         	call	_InitAnsel	;wreg free
   817                           
   818                           ;init.c: 7: InitMiscellaneous();
   819  000F3E  ECD1  F007         	call	_InitMiscellaneous	;wreg free
   820                           
   821                           ;init.c: 8: InitTransmission();
   822  000F42  EC75  F007         	call	_InitTransmission	;wreg free
   823                           
   824                           ;init.c: 9: InitTimer();
   825  000F46  EC61  F007         	call	_InitTimer	;wreg free
   826                           
   827                           ;init.c: 10: InitInterrupt();
   828  000F4A  ECCC  F007         	call	_InitInterrupt	;wreg free
   829  000F4E  0012               	return		;funcret
   830  000F50                     __end_of_Init:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           fsr1l	equ	0xFE1
   840                           
   841 ;; *************** function _InitTris *****************
   842 ;; Defined at:
   843 ;;		line 20 in file "init.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;		None               void
   850 ;; Registers used:
   851 ;;		wreg, status,2
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1
   857 ;;      Params:         0       0       0
   858 ;;      Locals:         0       0       0
   859 ;;      Temps:          0       0       0
   860 ;;      Totals:         0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    2
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_Init
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text2
   872  000F64                     __ptext2:
   873                           	opt stack 0
   874  000F64                     _InitTris:
   875                           	opt stack 27
   876                           
   877                           ;init.c: 21: TRISA = 0b00000000;
   878                           
   879                           ;incstack = 0
   880  000F64  0E00               	movlw	0
   881  000F66  6E92               	movwf	3986,c	;volatile
   882                           
   883                           ;init.c: 22: TRISB = 0b00011111;
   884  000F68  0E1F               	movlw	31
   885  000F6A  6E93               	movwf	3987,c	;volatile
   886                           
   887                           ;init.c: 23: TRISC = 0b10000010;
   888  000F6C  0E82               	movlw	130
   889  000F6E  6E94               	movwf	3988,c	;volatile
   890                           
   891                           ;init.c: 24: TRISE = 0;
   892  000F70  0E00               	movlw	0
   893  000F72  6E96               	movwf	3990,c	;volatile
   894  000F74  0012               	return		;funcret
   895  000F76                     __end_of_InitTris:
   896                           	opt stack 0
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           postdec1	equ	0xFE5
   904                           fsr1l	equ	0xFE1
   905                           
   906 ;; *************** function _InitTransmission *****************
   907 ;; Defined at:
   908 ;;		line 37 in file "init.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;		None               void
   915 ;; Registers used:
   916 ;;		wreg, status,2
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1
   922 ;;      Params:         0       0       0
   923 ;;      Locals:         0       0       0
   924 ;;      Temps:          0       0       0
   925 ;;      Totals:         0       0       0
   926 ;;Total ram usage:        0 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    2
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_Init
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text3
   937  000EEA                     __ptext3:
   938                           	opt stack 0
   939  000EEA                     _InitTransmission:
   940                           	opt stack 27
   941                           
   942                           ;init.c: 39: SSP1STAT = 0b01000000;
   943                           
   944                           ;incstack = 0
   945  000EEA  0E40               	movlw	64
   946  000EEC  6EC7               	movwf	4039,c	;volatile
   947                           
   948                           ;init.c: 40: SSP1CON1 = 0b00100010;
   949  000EEE  0E22               	movlw	34
   950  000EF0  6EC6               	movwf	4038,c	;volatile
   951                           
   952                           ;init.c: 42: TXSTA1bits.SYNC = 0;
   953  000EF2  98AC               	bcf	4012,4,c	;volatile
   954                           
   955                           ;init.c: 43: TXSTA1bits.BRGH = 1;
   956  000EF4  84AC               	bsf	4012,2,c	;volatile
   957                           
   958                           ;init.c: 44: BAUDCON1bits.BRG16 = 0;
   959  000EF6  96B8               	bcf	4024,3,c	;volatile
   960                           
   961                           ;init.c: 45: SPBRG1 = 25;
   962  000EF8  0E19               	movlw	25
   963  000EFA  6EAF               	movwf	4015,c	;volatile
   964                           
   965                           ;init.c: 46: TRISCbits.RC6 = 1;
   966  000EFC  8C94               	bsf	3988,6,c	;volatile
   967                           
   968                           ;init.c: 47: TRISCbits.RC7 = 1;
   969  000EFE  8E94               	bsf	3988,7,c	;volatile
   970                           
   971                           ;init.c: 48: RCSTA1bits.SPEN = 1;
   972  000F00  8EAB               	bsf	4011,7,c	;volatile
   973                           
   974                           ;init.c: 49: TXSTA1bits.TX9 = 1;
   975  000F02  8CAC               	bsf	4012,6,c	;volatile
   976                           
   977                           ;init.c: 50: TXSTA1bits.TXEN = 1;
   978  000F04  8AAC               	bsf	4012,5,c	;volatile
   979                           
   980                           ;init.c: 51: RCSTA1bits.RC9 = 1;
   981  000F06  8CAB               	bsf	4011,6,c	;volatile
   982                           
   983                           ;init.c: 52: RCSTA1bits.CREN = 1;
   984  000F08  88AB               	bsf	4011,4,c	;volatile
   985                           
   986                           ;init.c: 53: TRISCbits.RC6 = 0;
   987  000F0A  9C94               	bcf	3988,6,c	;volatile
   988  000F0C  0012               	return		;funcret
   989  000F0E                     __end_of_InitTransmission:
   990                           	opt stack 0
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000 ;; *************** function _InitTimer *****************
  1001 ;; Defined at:
  1002 ;;		line 56 in file "init.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;		None               void
  1009 ;; Registers used:
  1010 ;;		wreg, status,2
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1
  1016 ;;      Params:         0       0       0
  1017 ;;      Locals:         0       0       0
  1018 ;;      Temps:          0       0       0
  1019 ;;      Totals:         0       0       0
  1020 ;;Total ram usage:        0 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; Hardware stack levels required when called:    2
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_Init
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text4
  1031  000EC2                     __ptext4:
  1032                           	opt stack 0
  1033  000EC2                     _InitTimer:
  1034                           	opt stack 27
  1035                           
  1036                           ;init.c: 58: T1CONbits.TMR1CS = 0b00;
  1037                           
  1038                           ;incstack = 0
  1039  000EC2  0E3F               	movlw	-193
  1040  000EC4  16CD               	andwf	4045,f,c	;volatile
  1041                           
  1042                           ;init.c: 59: T1CONbits.T1CKPS = 0b11;
  1043  000EC6  0E30               	movlw	48
  1044  000EC8  12CD               	iorwf	4045,f,c	;volatile
  1045                           
  1046                           ;init.c: 60: T1CONbits.nT1SYNC = 0;
  1047  000ECA  94CD               	bcf	4045,2,c	;volatile
  1048                           
  1049                           ;init.c: 62: T3CONbits.TMR3CS = 0b00;
  1050  000ECC  0E3F               	movlw	-193
  1051  000ECE  16B1               	andwf	4017,f,c	;volatile
  1052                           
  1053                           ;init.c: 63: T3CONbits.T3CKPS = 0b11;
  1054  000ED0  0E30               	movlw	48
  1055  000ED2  12B1               	iorwf	4017,f,c	;volatile
  1056                           
  1057                           ;init.c: 64: T3CONbits.nT3SYNC = 0;
  1058  000ED4  94B1               	bcf	4017,2,c	;volatile
  1059                           
  1060                           ;init.c: 66: CCP1CONbits.CCP1M = 0b1010;
  1061  000ED6  50BD               	movf	4029,w,c	;volatile
  1062  000ED8  0BF0               	andlw	-16
  1063  000EDA  090A               	iorlw	10
  1064  000EDC  6EBD               	movwf	4029,c	;volatile
  1065                           
  1066                           ;init.c: 67: CCPTMRS0bits.C1TSEL = 0b01;
  1067  000EDE  010F               	movlb	15	; () banked
  1068  000EE0  5149               	movf	73,w,b	;volatile
  1069  000EE2  0BFC               	andlw	-4
  1070  000EE4  0901               	iorlw	1
  1071  000EE6  6F49               	movwf	73,b	;volatile
  1072                           
  1073                           ; BSR set to: 15
  1074  000EE8  0012               	return		;funcret
  1075  000EEA                     __end_of_InitTimer:
  1076                           	opt stack 0
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           postdec1	equ	0xFE5
  1084                           fsr1l	equ	0xFE1
  1085                           
  1086 ;; *************** function _InitPort *****************
  1087 ;; Defined at:
  1088 ;;		line 13 in file "init.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;		None
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;		None
  1093 ;; Return value:  Size  Location     Type
  1094 ;;		None               void
  1095 ;; Registers used:
  1096 ;;		wreg, status,2
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1
  1102 ;;      Params:         0       0       0
  1103 ;;      Locals:         0       0       0
  1104 ;;      Temps:          0       0       0
  1105 ;;      Totals:         0       0       0
  1106 ;;Total ram usage:        0 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    2
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_Init
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text5
  1117  000F76                     __ptext5:
  1118                           	opt stack 0
  1119  000F76                     _InitPort:
  1120                           	opt stack 27
  1121                           
  1122                           ;init.c: 14: PORTA = 0b00000000;
  1123                           
  1124                           ; BSR set to: 15
  1125                           ;incstack = 0
  1126  000F76  0E00               	movlw	0
  1127  000F78  6E80               	movwf	3968,c	;volatile
  1128                           
  1129                           ;init.c: 15: PORTB = 0b00000000;
  1130  000F7A  0E00               	movlw	0
  1131  000F7C  6E81               	movwf	3969,c	;volatile
  1132                           
  1133                           ;init.c: 16: PORTC = 0b00000001;
  1134  000F7E  0E01               	movlw	1
  1135  000F80  6E82               	movwf	3970,c	;volatile
  1136                           
  1137                           ;init.c: 17: PORTE = 0;
  1138  000F82  0E00               	movlw	0
  1139  000F84  6E84               	movwf	3972,c	;volatile
  1140  000F86  0012               	return		;funcret
  1141  000F88                     __end_of_InitPort:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           
  1152 ;; *************** function _InitMiscellaneous *****************
  1153 ;; Defined at:
  1154 ;;		line 33 in file "init.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;		None               void
  1161 ;; Registers used:
  1162 ;;		wreg, status,2
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1
  1168 ;;      Params:         0       0       0
  1169 ;;      Locals:         0       0       0
  1170 ;;      Temps:          0       0       0
  1171 ;;      Totals:         0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_Init
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text6
  1183  000FA2                     __ptext6:
  1184                           	opt stack 0
  1185  000FA2                     _InitMiscellaneous:
  1186                           	opt stack 27
  1187                           
  1188                           ;init.c: 34: OSCCON = 0b01010011;
  1189                           
  1190                           ;incstack = 0
  1191  000FA2  0E53               	movlw	83
  1192  000FA4  6ED3               	movwf	4051,c	;volatile
  1193  000FA6  0012               	return		;funcret
  1194  000FA8                     __end_of_InitMiscellaneous:
  1195                           	opt stack 0
  1196                           tblptru	equ	0xFF8
  1197                           tblptrh	equ	0xFF7
  1198                           tblptrl	equ	0xFF6
  1199                           tablat	equ	0xFF5
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           postdec1	equ	0xFE5
  1203                           fsr1l	equ	0xFE1
  1204                           
  1205 ;; *************** function _InitInterrupt *****************
  1206 ;; Defined at:
  1207 ;;		line 70 in file "init.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;		None               void
  1214 ;; Registers used:
  1215 ;;		None
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1
  1221 ;;      Params:         0       0       0
  1222 ;;      Locals:         0       0       0
  1223 ;;      Temps:          0       0       0
  1224 ;;      Totals:         0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    2
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		_Init
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text7
  1236  000F98                     __ptext7:
  1237                           	opt stack 0
  1238  000F98                     _InitInterrupt:
  1239                           	opt stack 27
  1240                           
  1241                           ;init.c: 71: INTCONbits.GIE = 1;
  1242                           
  1243                           ;incstack = 0
  1244  000F98  8EF2               	bsf	intcon,7,c	;volatile
  1245                           
  1246                           ;init.c: 72: INTCONbits.PEIE = 1;
  1247  000F9A  8CF2               	bsf	intcon,6,c	;volatile
  1248                           
  1249                           ;init.c: 73: PIE1bits.RCIE = 1;
  1250  000F9C  8A9D               	bsf	3997,5,c	;volatile
  1251                           
  1252                           ;init.c: 74: PIE1bits.CCP1IE = 1;
  1253  000F9E  849D               	bsf	3997,2,c	;volatile
  1254  000FA0  0012               	return		;funcret
  1255  000FA2                     __end_of_InitInterrupt:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           intcon	equ	0xFF2
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267 ;; *************** function _InitAnsel *****************
  1268 ;; Defined at:
  1269 ;;		line 27 in file "init.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;		None
  1274 ;; Return value:  Size  Location     Type
  1275 ;;		None               void
  1276 ;; Registers used:
  1277 ;;		wreg, status,2
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1
  1283 ;;      Params:         0       0       0
  1284 ;;      Locals:         0       0       0
  1285 ;;      Temps:          0       0       0
  1286 ;;      Totals:         0       0       0
  1287 ;;Total ram usage:        0 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    2
  1290 ;; This function calls:
  1291 ;;		Nothing
  1292 ;; This function is called by:
  1293 ;;		_Init
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text8
  1298  000F50                     __ptext8:
  1299                           	opt stack 0
  1300  000F50                     _InitAnsel:
  1301                           	opt stack 27
  1302                           
  1303                           ;init.c: 28: ANSELA = 0;
  1304                           
  1305                           ;incstack = 0
  1306  000F50  0E00               	movlw	0
  1307  000F52  010F               	movlb	15	; () banked
  1308  000F54  6F38               	movwf	56,b	;volatile
  1309                           
  1310                           ;init.c: 29: ANSELB = 0;
  1311  000F56  0E00               	movlw	0
  1312  000F58  010F               	movlb	15	; () banked
  1313  000F5A  6F39               	movwf	57,b	;volatile
  1314                           
  1315                           ;init.c: 30: ANSELC = 0;
  1316  000F5C  0E00               	movlw	0
  1317  000F5E  010F               	movlb	15	; () banked
  1318  000F60  6F3A               	movwf	58,b	;volatile
  1319                           
  1320                           ; BSR set to: 15
  1321  000F62  0012               	return		;funcret
  1322  000F64                     __end_of_InitAnsel:
  1323                           	opt stack 0
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           intcon	equ	0xFF2
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           fsr1l	equ	0xFE1
  1333                           
  1334 ;; *************** function _Check_Detonators *****************
  1335 ;; Defined at:
  1336 ;;		line 25 in file "ignition.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;		None               void
  1343 ;; Registers used:
  1344 ;;		None
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1
  1350 ;;      Params:         0       0       0
  1351 ;;      Locals:         0       0       0
  1352 ;;      Temps:          0       0       0
  1353 ;;      Totals:         0       0       0
  1354 ;;Total ram usage:        0 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    2
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text9
  1365  000FA8                     __ptext9:
  1366                           	opt stack 0
  1367  000FA8                     _Check_Detonators:
  1368                           	opt stack 28
  1369                           
  1370                           ; BSR set to: 15
  1371                           ;incstack = 0
  1372  000FA8  0012               	return		;funcret
  1373  000FAA                     __end_of_Check_Detonators:
  1374                           	opt stack 0
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           intcon	equ	0xFF2
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385 ;; *************** function _Check_Buttons *****************
  1386 ;; Defined at:
  1387 ;;		line 26 in file "buttonchanges.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;		None               void
  1394 ;; Registers used:
  1395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1
  1401 ;;      Params:         0       0       0
  1402 ;;      Locals:         0       0       0
  1403 ;;      Temps:          0       2       0
  1404 ;;      Totals:         0       2       0
  1405 ;;Total ram usage:        2 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    8
  1408 ;; This function calls:
  1409 ;;		_Del_Data
  1410 ;;		_Delay_Routine
  1411 ;;		_Read_Data
  1412 ;;		_Save_Data
  1413 ;;		_Set_Display
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text10
  1420  000250                     __ptext10:
  1421                           	opt stack 0
  1422  000250                     _Check_Buttons:
  1423                           	opt stack 22
  1424                           
  1425                           ;buttonchanges.c: 27: if(PORTCbits.RC1 == 1) {
  1426                           
  1427                           ;incstack = 0
  1428  000250  A282               	btfss	3970,1,c	;volatile
  1429  000252  D008               	goto	l86
  1430                           
  1431                           ;buttonchanges.c: 28: Delay_Routine(3);
  1432  000254  0E03               	movlw	3
  1433  000256  EC87  F007         	call	_Delay_Routine
  1434                           
  1435                           ;buttonchanges.c: 29: if(PORTCbits.RC1 == 1) {
  1436  00025A  A282               	btfss	3970,1,c	;volatile
  1437  00025C  0012               	return	
  1438                           
  1439                           ;buttonchanges.c: 30: ignite_ready = 1;
  1440  00025E  8042               	bsf	_ignite_ready/(0+8),_ignite_ready& (0+7),c
  1441                           
  1442                           ;buttonchanges.c: 31: __nop();
  1443  000260  F000               	nop	
  1444                           
  1445                           ;buttonchanges.c: 35: }
  1446                           ;buttonchanges.c: 36: } else if(PORTBbits.RB2 == 1) {
  1447                           
  1448                           ;buttonchanges.c: 32: return;
  1449  000262  0012               	return	
  1450  000264                     l86:
  1451  000264  A481               	btfss	3969,2,c	;volatile
  1452  000266  D05C               	goto	l90
  1453                           
  1454                           ;buttonchanges.c: 37: Delay_Routine(3);
  1455  000268  0E03               	movlw	3
  1456  00026A  EC87  F007         	call	_Delay_Routine
  1457                           
  1458                           ;buttonchanges.c: 38: if(PORTBbits.RB2 == 1) {
  1459  00026E  A481               	btfss	3969,2,c	;volatile
  1460  000270  0012               	return	
  1461                           
  1462                           ;buttonchanges.c: 39: if(PORTBbits.RB3 == 1) {
  1463  000272  A681               	btfss	3969,3,c	;volatile
  1464  000274  D008               	goto	l2525
  1465                           
  1466                           ;buttonchanges.c: 40: Delay_Routine(3);
  1467  000276  0E03               	movlw	3
  1468  000278  EC87  F007         	call	_Delay_Routine
  1469                           
  1470                           ;buttonchanges.c: 41: if(PORTBbits.RB3 == 1) {
  1471  00027C  A681               	btfss	3969,3,c	;volatile
  1472  00027E  D003               	goto	l2525
  1473                           
  1474                           ;buttonchanges.c: 42: Del_Data();
  1475  000280  ECCD  F006         	call	_Del_Data	;wreg free
  1476                           
  1477                           ;buttonchanges.c: 43: return;
  1478  000284  0012               	return	
  1479  000286                     l2525:
  1480                           
  1481                           ;buttonchanges.c: 45: }
  1482                           ;buttonchanges.c: 46: }
  1483                           ;buttonchanges.c: 47: pin[pin_selected].time++;
  1484  000286  5035               	movf	_pin_selected,w,c
  1485  000288  0D06               	mullw	6
  1486  00028A  0E04               	movlw	4
  1487  00028C  26F3               	addwf	prodl,f,c
  1488  00028E  0E00               	movlw	0
  1489  000290  22F4               	addwfc	prodh,f,c
  1490  000292  0E00               	movlw	low _pin
  1491  000294  24F3               	addwf	prodl,w,c
  1492  000296  6ED9               	movwf	fsr2l,c
  1493  000298  0E01               	movlw	high _pin
  1494  00029A  20F4               	addwfc	prodh,w,c
  1495  00029C  6EDA               	movwf	fsr2h,c
  1496  00029E  2ADE               	incf	postinc2,f,c
  1497  0002A0  0E00               	movlw	0
  1498  0002A2  22DD               	addwfc	postdec2,f,c
  1499                           
  1500                           ;buttonchanges.c: 48: if(pin[pin_selected].time > 999) {
  1501  0002A4  5035               	movf	_pin_selected,w,c
  1502  0002A6  0D06               	mullw	6
  1503  0002A8  0E04               	movlw	4
  1504  0002AA  26F3               	addwf	prodl,f,c
  1505  0002AC  0E00               	movlw	0
  1506  0002AE  22F4               	addwfc	prodh,f,c
  1507  0002B0  0E00               	movlw	low _pin
  1508  0002B2  24F3               	addwf	prodl,w,c
  1509  0002B4  6ED9               	movwf	fsr2l,c
  1510  0002B6  0E01               	movlw	high _pin
  1511  0002B8  20F4               	addwfc	prodh,w,c
  1512  0002BA  6EDA               	movwf	fsr2h,c
  1513  0002BC  0E01               	movlw	1
  1514  0002BE  BEDB               	btfsc	plusw2,7,c
  1515  0002C0  D016               	goto	l2529
  1516  0002C2  0EE8               	movlw	232
  1517  0002C4  5CDE               	subwf	postinc2,w,c
  1518  0002C6  0E03               	movlw	3
  1519  0002C8  58DE               	subwfb	postinc2,w,c
  1520  0002CA  A0D8               	btfss	status,0,c
  1521  0002CC  D010               	goto	l2529
  1522                           
  1523                           ;buttonchanges.c: 49: pin[pin_selected].time = 0;
  1524  0002CE  5035               	movf	_pin_selected,w,c
  1525  0002D0  0D06               	mullw	6
  1526  0002D2  0E04               	movlw	4
  1527  0002D4  26F3               	addwf	prodl,f,c
  1528  0002D6  0E00               	movlw	0
  1529  0002D8  22F4               	addwfc	prodh,f,c
  1530  0002DA  0E00               	movlw	low _pin
  1531  0002DC  24F3               	addwf	prodl,w,c
  1532  0002DE  6ED9               	movwf	fsr2l,c
  1533  0002E0  0E01               	movlw	high _pin
  1534  0002E2  20F4               	addwfc	prodh,w,c
  1535  0002E4  6EDA               	movwf	fsr2h,c
  1536  0002E6  0E00               	movlw	0
  1537  0002E8  6EDE               	movwf	postinc2,c
  1538  0002EA  0E00               	movlw	0
  1539  0002EC  6EDD               	movwf	postdec2,c
  1540  0002EE                     l2529:
  1541                           
  1542                           ;buttonchanges.c: 50: }
  1543                           ;buttonchanges.c: 51: __nop();
  1544  0002EE  F000               	nop	
  1545                           
  1546                           ;buttonchanges.c: 52: Set_Display('7', '-', pin[pin_selected].time);
  1547  0002F0  0E2D               	movlw	45
  1548  0002F2  0100               	movlb	0	; () banked
  1549  0002F4  6F61               	movwf	Set_Display@information& (0+255),b
  1550  0002F6  5035               	movf	_pin_selected,w,c
  1551  0002F8  0D06               	mullw	6
  1552  0002FA  0E04               	movlw	4
  1553  0002FC  26F3               	addwf	prodl,f,c
  1554  0002FE  0E00               	movlw	0
  1555  000300  22F4               	addwfc	prodh,f,c
  1556  000302  0E00               	movlw	low _pin
  1557  000304  24F3               	addwf	prodl,w,c
  1558  000306  6ED9               	movwf	fsr2l,c
  1559  000308  0E01               	movlw	high _pin
  1560  00030A  20F4               	addwfc	prodh,w,c
  1561  00030C  6EDA               	movwf	fsr2h,c
  1562  00030E  CFDE F062          	movff	postinc2,Set_Display@value
  1563  000312  CFDD F063          	movff	postdec2,Set_Display@value+1
  1564  000316  0E37               	movlw	55
  1565  000318  EC58  F006         	call	_Set_Display
  1566                           
  1567                           ;buttonchanges.c: 53: __nop();
  1568  00031C  F000               	nop	
  1569                           
  1570                           ;buttonchanges.c: 54: }
  1571                           ;buttonchanges.c: 55: } else if(PORTBbits.RB3 == 1) {
  1572  00031E  0012               	return	
  1573  000320                     l90:
  1574  000320  A681               	btfss	3969,3,c	;volatile
  1575  000322  D056               	goto	l96
  1576                           
  1577                           ;buttonchanges.c: 56: Delay_Routine(3);
  1578  000324  0E03               	movlw	3
  1579  000326  EC87  F007         	call	_Delay_Routine
  1580                           
  1581                           ;buttonchanges.c: 57: if(PORTBbits.RB3 == 1) {
  1582  00032A  A681               	btfss	3969,3,c	;volatile
  1583  00032C  0012               	return	
  1584                           
  1585                           ;buttonchanges.c: 58: if(PORTBbits.RB2 == 1) {
  1586  00032E  A481               	btfss	3969,2,c	;volatile
  1587  000330  D008               	goto	l2549
  1588                           
  1589                           ;buttonchanges.c: 59: Delay_Routine(3);
  1590  000332  0E03               	movlw	3
  1591  000334  EC87  F007         	call	_Delay_Routine
  1592                           
  1593                           ;buttonchanges.c: 60: if(PORTBbits.RB2 == 1) {
  1594  000338  A481               	btfss	3969,2,c	;volatile
  1595  00033A  D003               	goto	l2549
  1596                           
  1597                           ;buttonchanges.c: 61: Del_Data();
  1598  00033C  ECCD  F006         	call	_Del_Data	;wreg free
  1599                           
  1600                           ;buttonchanges.c: 62: return;
  1601  000340  0012               	return	
  1602  000342                     l2549:
  1603                           
  1604                           ;buttonchanges.c: 64: }
  1605                           ;buttonchanges.c: 65: }
  1606                           ;buttonchanges.c: 66: pin[pin_selected].time--;
  1607  000342  5035               	movf	_pin_selected,w,c
  1608  000344  0D06               	mullw	6
  1609  000346  0E04               	movlw	4
  1610  000348  26F3               	addwf	prodl,f,c
  1611  00034A  0E00               	movlw	0
  1612  00034C  22F4               	addwfc	prodh,f,c
  1613  00034E  0E00               	movlw	low _pin
  1614  000350  24F3               	addwf	prodl,w,c
  1615  000352  6ED9               	movwf	fsr2l,c
  1616  000354  0E01               	movlw	high _pin
  1617  000356  20F4               	addwfc	prodh,w,c
  1618  000358  6EDA               	movwf	fsr2h,c
  1619  00035A  06DE               	decf	postinc2,f,c
  1620  00035C  0E00               	movlw	0
  1621  00035E  5ADD               	subwfb	postdec2,f,c
  1622                           
  1623                           ;buttonchanges.c: 67: if(pin[pin_selected].time < 0) {
  1624  000360  5035               	movf	_pin_selected,w,c
  1625  000362  0D06               	mullw	6
  1626  000364  0E04               	movlw	4
  1627  000366  26F3               	addwf	prodl,f,c
  1628  000368  0E00               	movlw	0
  1629  00036A  22F4               	addwfc	prodh,f,c
  1630  00036C  0E00               	movlw	low _pin
  1631  00036E  24F3               	addwf	prodl,w,c
  1632  000370  6ED9               	movwf	fsr2l,c
  1633  000372  0E01               	movlw	high _pin
  1634  000374  20F4               	addwfc	prodh,w,c
  1635  000376  6EDA               	movwf	fsr2h,c
  1636  000378  0E01               	movlw	1
  1637  00037A  AEDB               	btfss	plusw2,7,c
  1638  00037C  D010               	goto	l2553
  1639                           
  1640                           ;buttonchanges.c: 68: pin[pin_selected].time = 999;
  1641  00037E  5035               	movf	_pin_selected,w,c
  1642  000380  0D06               	mullw	6
  1643  000382  0E04               	movlw	4
  1644  000384  26F3               	addwf	prodl,f,c
  1645  000386  0E00               	movlw	0
  1646  000388  22F4               	addwfc	prodh,f,c
  1647  00038A  0E00               	movlw	low _pin
  1648  00038C  24F3               	addwf	prodl,w,c
  1649  00038E  6ED9               	movwf	fsr2l,c
  1650  000390  0E01               	movlw	high _pin
  1651  000392  20F4               	addwfc	prodh,w,c
  1652  000394  6EDA               	movwf	fsr2h,c
  1653  000396  0EE7               	movlw	231
  1654  000398  6EDE               	movwf	postinc2,c
  1655  00039A  0E03               	movlw	3
  1656  00039C  6EDD               	movwf	postdec2,c
  1657  00039E                     l2553:
  1658                           
  1659                           ;buttonchanges.c: 69: }
  1660                           ;buttonchanges.c: 70: __nop();
  1661  00039E  F000               	nop	
  1662                           
  1663                           ;buttonchanges.c: 71: Set_Display('7', '-', pin[pin_selected].time);
  1664  0003A0  0E2D               	movlw	45
  1665  0003A2  0100               	movlb	0	; () banked
  1666  0003A4  6F61               	movwf	Set_Display@information& (0+255),b
  1667  0003A6  5035               	movf	_pin_selected,w,c
  1668  0003A8  0D06               	mullw	6
  1669  0003AA  0E04               	movlw	4
  1670  0003AC  26F3               	addwf	prodl,f,c
  1671  0003AE  0E00               	movlw	0
  1672  0003B0  22F4               	addwfc	prodh,f,c
  1673  0003B2  0E00               	movlw	low _pin
  1674  0003B4  24F3               	addwf	prodl,w,c
  1675  0003B6  6ED9               	movwf	fsr2l,c
  1676  0003B8  0E01               	movlw	high _pin
  1677  0003BA  20F4               	addwfc	prodh,w,c
  1678  0003BC  6EDA               	movwf	fsr2h,c
  1679  0003BE  CFDE F062          	movff	postinc2,Set_Display@value
  1680  0003C2  CFDD F063          	movff	postdec2,Set_Display@value+1
  1681  0003C6  0E37               	movlw	55
  1682  0003C8  EC58  F006         	call	_Set_Display
  1683                           
  1684                           ;buttonchanges.c: 72: __nop();
  1685  0003CC  F000               	nop	
  1686                           
  1687                           ;buttonchanges.c: 73: }
  1688                           ;buttonchanges.c: 74: } else if(PORTBbits.RB4 == 1) {
  1689  0003CE  0012               	return	
  1690  0003D0                     l96:
  1691  0003D0  A881               	btfss	3969,4,c	;volatile
  1692  0003D2  D053               	goto	l102
  1693                           
  1694                           ;buttonchanges.c: 75: Delay_Routine(3);
  1695  0003D4  0E03               	movlw	3
  1696  0003D6  EC87  F007         	call	_Delay_Routine
  1697                           
  1698                           ;buttonchanges.c: 76: if(PORTBbits.RB4 == 1) {
  1699  0003DA  A881               	btfss	3969,4,c	;volatile
  1700  0003DC  0012               	return	
  1701                           
  1702                           ;buttonchanges.c: 77: pin[pin_selected].time += 10;
  1703  0003DE  5035               	movf	_pin_selected,w,c
  1704  0003E0  0D06               	mullw	6
  1705  0003E2  0E04               	movlw	4
  1706  0003E4  26F3               	addwf	prodl,f,c
  1707  0003E6  0E00               	movlw	0
  1708  0003E8  22F4               	addwfc	prodh,f,c
  1709  0003EA  0E00               	movlw	low _pin
  1710  0003EC  24F3               	addwf	prodl,w,c
  1711  0003EE  6ED9               	movwf	fsr2l,c
  1712  0003F0  0E01               	movlw	high _pin
  1713  0003F2  20F4               	addwfc	prodh,w,c
  1714  0003F4  6EDA               	movwf	fsr2h,c
  1715  0003F6  0E0A               	movlw	10
  1716  0003F8  26DE               	addwf	postinc2,f,c
  1717  0003FA  0E00               	movlw	0
  1718  0003FC  22DD               	addwfc	postdec2,f,c
  1719                           
  1720                           ;buttonchanges.c: 78: if(pin[pin_selected].time > 999) {
  1721  0003FE  5035               	movf	_pin_selected,w,c
  1722  000400  0D06               	mullw	6
  1723  000402  0E04               	movlw	4
  1724  000404  26F3               	addwf	prodl,f,c
  1725  000406  0E00               	movlw	0
  1726  000408  22F4               	addwfc	prodh,f,c
  1727  00040A  0E00               	movlw	low _pin
  1728  00040C  24F3               	addwf	prodl,w,c
  1729  00040E  6ED9               	movwf	fsr2l,c
  1730  000410  0E01               	movlw	high _pin
  1731  000412  20F4               	addwfc	prodh,w,c
  1732  000414  6EDA               	movwf	fsr2h,c
  1733  000416  0E01               	movlw	1
  1734  000418  BEDB               	btfsc	plusw2,7,c
  1735  00041A  D016               	goto	l2567
  1736  00041C  0EE8               	movlw	232
  1737  00041E  5CDE               	subwf	postinc2,w,c
  1738  000420  0E03               	movlw	3
  1739  000422  58DE               	subwfb	postinc2,w,c
  1740  000424  A0D8               	btfss	status,0,c
  1741  000426  D010               	goto	l2567
  1742                           
  1743                           ;buttonchanges.c: 79: pin[pin_selected].time = 0;
  1744  000428  5035               	movf	_pin_selected,w,c
  1745  00042A  0D06               	mullw	6
  1746  00042C  0E04               	movlw	4
  1747  00042E  26F3               	addwf	prodl,f,c
  1748  000430  0E00               	movlw	0
  1749  000432  22F4               	addwfc	prodh,f,c
  1750  000434  0E00               	movlw	low _pin
  1751  000436  24F3               	addwf	prodl,w,c
  1752  000438  6ED9               	movwf	fsr2l,c
  1753  00043A  0E01               	movlw	high _pin
  1754  00043C  20F4               	addwfc	prodh,w,c
  1755  00043E  6EDA               	movwf	fsr2h,c
  1756  000440  0E00               	movlw	0
  1757  000442  6EDE               	movwf	postinc2,c
  1758  000444  0E00               	movlw	0
  1759  000446  6EDD               	movwf	postdec2,c
  1760  000448                     l2567:
  1761                           
  1762                           ;buttonchanges.c: 80: }
  1763                           ;buttonchanges.c: 81: __nop();
  1764  000448  F000               	nop	
  1765                           
  1766                           ;buttonchanges.c: 82: Set_Display('7', '-', pin[pin_selected].time);
  1767  00044A  0E2D               	movlw	45
  1768  00044C  0100               	movlb	0	; () banked
  1769  00044E  6F61               	movwf	Set_Display@information& (0+255),b
  1770  000450  5035               	movf	_pin_selected,w,c
  1771  000452  0D06               	mullw	6
  1772  000454  0E04               	movlw	4
  1773  000456  26F3               	addwf	prodl,f,c
  1774  000458  0E00               	movlw	0
  1775  00045A  22F4               	addwfc	prodh,f,c
  1776  00045C  0E00               	movlw	low _pin
  1777  00045E  24F3               	addwf	prodl,w,c
  1778  000460  6ED9               	movwf	fsr2l,c
  1779  000462  0E01               	movlw	high _pin
  1780  000464  20F4               	addwfc	prodh,w,c
  1781  000466  6EDA               	movwf	fsr2h,c
  1782  000468  CFDE F062          	movff	postinc2,Set_Display@value
  1783  00046C  CFDD F063          	movff	postdec2,Set_Display@value+1
  1784  000470  0E37               	movlw	55
  1785  000472  EC58  F006         	call	_Set_Display
  1786                           
  1787                           ;buttonchanges.c: 83: __nop();
  1788  000476  F000               	nop	
  1789                           
  1790                           ;buttonchanges.c: 84: }
  1791                           ;buttonchanges.c: 85: } else if(PORTBbits.RB1 == 1) {
  1792  000478  0012               	return	
  1793  00047A                     l102:
  1794  00047A  A281               	btfss	3969,1,c	;volatile
  1795  00047C  D0A2               	goto	l106
  1796                           
  1797                           ;buttonchanges.c: 86: Delay_Routine(3);
  1798  00047E  0E03               	movlw	3
  1799  000480  EC87  F007         	call	_Delay_Routine
  1800                           
  1801                           ;buttonchanges.c: 87: if(PORTBbits.RB1 == 1) {
  1802  000484  A281               	btfss	3969,1,c	;volatile
  1803  000486  0012               	return	
  1804                           
  1805                           ;buttonchanges.c: 88: if(PORTBbits.RB0 == 1) {
  1806  000488  A081               	btfss	3969,0,c	;volatile
  1807  00048A  D007               	goto	l2585
  1808                           
  1809                           ;buttonchanges.c: 89: Delay_Routine(3);
  1810  00048C  0E03               	movlw	3
  1811  00048E  EC87  F007         	call	_Delay_Routine
  1812                           
  1813                           ;buttonchanges.c: 90: if(PORTBbits.RB0 == 1) {
  1814  000492  A081               	btfss	3969,0,c	;volatile
  1815  000494  D002               	goto	l2585
  1816                           
  1817                           ;buttonchanges.c: 91: testflag = 1;
  1818  000496  8442               	bsf	_testflag/(0+8),_testflag& (0+7),c
  1819                           
  1820                           ;buttonchanges.c: 92: return;
  1821  000498  0012               	return	
  1822  00049A                     l2585:
  1823                           
  1824                           ;buttonchanges.c: 94: }
  1825                           ;buttonchanges.c: 95: }
  1826                           ;buttonchanges.c: 96: Save_Data(pin[pin_selected].time, pin[pin_selected].address);
  1827  00049A  5035               	movf	_pin_selected,w,c
  1828  00049C  0D06               	mullw	6
  1829  00049E  0E04               	movlw	4
  1830  0004A0  26F3               	addwf	prodl,f,c
  1831  0004A2  0E00               	movlw	0
  1832  0004A4  22F4               	addwfc	prodh,f,c
  1833  0004A6  0E00               	movlw	low _pin
  1834  0004A8  24F3               	addwf	prodl,w,c
  1835  0004AA  6ED9               	movwf	fsr2l,c
  1836  0004AC  0E01               	movlw	high _pin
  1837  0004AE  20F4               	addwfc	prodh,w,c
  1838  0004B0  6EDA               	movwf	fsr2h,c
  1839  0004B2  CFDE F01D          	movff	postinc2,Save_Data@store
  1840  0004B6  CFDD F01E          	movff	postdec2,Save_Data@store+1
  1841  0004BA  5035               	movf	_pin_selected,w,c
  1842  0004BC  0D06               	mullw	6
  1843  0004BE  0E02               	movlw	2
  1844  0004C0  26F3               	addwf	prodl,f,c
  1845  0004C2  0E00               	movlw	0
  1846  0004C4  22F4               	addwfc	prodh,f,c
  1847  0004C6  0E00               	movlw	low _pin
  1848  0004C8  24F3               	addwf	prodl,w,c
  1849  0004CA  6ED9               	movwf	fsr2l,c
  1850  0004CC  0E01               	movlw	high _pin
  1851  0004CE  20F4               	addwfc	prodh,w,c
  1852  0004D0  6EDA               	movwf	fsr2h,c
  1853  0004D2  50DF               	movf	indf2,w,c
  1854  0004D4  6E1F               	movwf	Save_Data@store_address,c
  1855  0004D6  EC84  F006         	call	_Save_Data	;wreg free
  1856                           
  1857                           ;buttonchanges.c: 97: pin_selected++;
  1858  0004DA  2A35               	incf	_pin_selected,f,c
  1859                           
  1860                           ;buttonchanges.c: 98: switch (slave_selected) {
  1861  0004DC  D010               	goto	l2603
  1862  0004DE                     l2589:
  1863                           
  1864                           ;buttonchanges.c: 100: if(pin_selected > 9) {
  1865  0004DE  0E09               	movlw	9
  1866  0004E0  6435               	cpfsgt	_pin_selected,c
  1867  0004E2  D017               	goto	l2605
  1868                           
  1869                           ;buttonchanges.c: 101: pin_selected = 0;
  1870  0004E4  0E00               	movlw	0
  1871  0004E6  D009               	goto	L2
  1872  0004E8                     l2593:
  1873                           
  1874                           ;buttonchanges.c: 105: if(pin_selected > 19) {
  1875  0004E8  0E13               	movlw	19
  1876  0004EA  6435               	cpfsgt	_pin_selected,c
  1877  0004EC  D012               	goto	l2605
  1878                           
  1879                           ;buttonchanges.c: 106: pin_selected = 10;
  1880  0004EE  0E0A               	movlw	10
  1881  0004F0  D004               	goto	L2
  1882  0004F2                     l2597:
  1883                           
  1884                           ;buttonchanges.c: 110: if(pin_selected > 29) {
  1885  0004F2  0E1D               	movlw	29
  1886  0004F4  6435               	cpfsgt	_pin_selected,c
  1887  0004F6  D00D               	goto	l2605
  1888                           
  1889                           ;buttonchanges.c: 111: pin_selected = 20;
  1890  0004F8  0E14               	movlw	20
  1891  0004FA                     L2:
  1892  0004FA  6E35               	movwf	_pin_selected,c
  1893                           
  1894                           ;buttonchanges.c: 114: }
  1895                           
  1896                           ;buttonchanges.c: 112: }
  1897                           ;buttonchanges.c: 113: break;
  1898  0004FC  D00A               	goto	l2605
  1899  0004FE                     l2603:
  1900  0004FE  5037               	movf	_slave_selected,w,c
  1901                           
  1902                           ; Switch size 1, requested type "space"
  1903                           ; Number of cases is 3, Range of values is 0 to 2
  1904                           ; switch strategies available:
  1905                           ; Name         Instructions Cycles
  1906                           ; simple_byte           10     6 (average)
  1907                           ;	Chosen strategy is simple_byte
  1908  000500  0A00               	xorlw	0	; case 0
  1909  000502  B4D8               	btfsc	status,2,c
  1910  000504  D7EC               	goto	l2589
  1911  000506  0A01               	xorlw	1	; case 1
  1912  000508  B4D8               	btfsc	status,2,c
  1913  00050A  D7EE               	goto	l2593
  1914  00050C  0A03               	xorlw	3	; case 2
  1915  00050E  B4D8               	btfsc	status,2,c
  1916  000510  D7F0               	goto	l2597
  1917  000512                     l2605:
  1918                           
  1919                           ;buttonchanges.c: 115: pin[pin_selected].time = Read_Data(pin[pin_selected].address);
  1920  000512  5035               	movf	_pin_selected,w,c
  1921  000514  0D06               	mullw	6
  1922  000516  0E02               	movlw	2
  1923  000518  26F3               	addwf	prodl,f,c
  1924  00051A  0E00               	movlw	0
  1925  00051C  22F4               	addwfc	prodh,f,c
  1926  00051E  0E00               	movlw	low _pin
  1927  000520  24F3               	addwf	prodl,w,c
  1928  000522  6ED9               	movwf	fsr2l,c
  1929  000524  0E01               	movlw	high _pin
  1930  000526  20F4               	addwfc	prodh,w,c
  1931  000528  6EDA               	movwf	fsr2h,c
  1932  00052A  50DF               	movf	indf2,w,c
  1933  00052C  EC0D  F007         	call	_Read_Data
  1934  000530  5035               	movf	_pin_selected,w,c
  1935  000532  0D06               	mullw	6
  1936  000534  0E04               	movlw	4
  1937  000536  26F3               	addwf	prodl,f,c
  1938  000538  0E00               	movlw	0
  1939  00053A  22F4               	addwfc	prodh,f,c
  1940  00053C  0E00               	movlw	low _pin
  1941  00053E  24F3               	addwf	prodl,w,c
  1942  000540  6ED9               	movwf	fsr2l,c
  1943  000542  0E01               	movlw	high _pin
  1944  000544  20F4               	addwfc	prodh,w,c
  1945  000546  6EDA               	movwf	fsr2h,c
  1946  000548  C01D  FFDE         	movff	?_Read_Data,postinc2
  1947  00054C  C01E  FFDD         	movff	?_Read_Data+1,postdec2
  1948                           
  1949                           ;buttonchanges.c: 116: __nop();
  1950  000550  F000               	nop	
  1951                           
  1952                           ;buttonchanges.c: 117: Set_Display('7', 'A', pin[pin_selected].output);
  1953  000552  0E41               	movlw	65
  1954  000554  0100               	movlb	0	; () banked
  1955  000556  6F61               	movwf	Set_Display@information& (0+255),b
  1956  000558  5035               	movf	_pin_selected,w,c
  1957  00055A  0D06               	mullw	6
  1958  00055C  0E01               	movlw	1
  1959  00055E  26F3               	addwf	prodl,f,c
  1960  000560  0E00               	movlw	0
  1961  000562  22F4               	addwfc	prodh,f,c
  1962  000564  0E00               	movlw	low _pin
  1963  000566  24F3               	addwf	prodl,w,c
  1964  000568  6ED9               	movwf	fsr2l,c
  1965  00056A  0E01               	movlw	high _pin
  1966  00056C  20F4               	addwfc	prodh,w,c
  1967  00056E  6EDA               	movwf	fsr2h,c
  1968  000570  50DF               	movf	indf2,w,c
  1969  000572  0100               	movlb	0	; () banked
  1970  000574  6F68               	movwf	??_Check_Buttons& (0+255),b
  1971  000576  0100               	movlb	0	; () banked
  1972  000578  5168               	movf	??_Check_Buttons& (0+255),w,b
  1973  00057A  0100               	movlb	0	; () banked
  1974  00057C  6F62               	movwf	Set_Display@value& (0+255),b
  1975  00057E  6B63               	clrf	(Set_Display@value+1)& (0+255),b
  1976  000580  0E37               	movlw	55
  1977  000582  EC58  F006         	call	_Set_Display
  1978                           
  1979                           ;buttonchanges.c: 118: Delay_Routine(30);
  1980  000586  0E1E               	movlw	30
  1981  000588  EC87  F007         	call	_Delay_Routine
  1982                           
  1983                           ;buttonchanges.c: 119: Set_Display('7', '-', pin[pin_selected].time);
  1984  00058C  0E2D               	movlw	45
  1985  00058E  0100               	movlb	0	; () banked
  1986  000590  6F61               	movwf	Set_Display@information& (0+255),b
  1987  000592  5035               	movf	_pin_selected,w,c
  1988  000594  0D06               	mullw	6
  1989  000596  0E04               	movlw	4
  1990  000598  26F3               	addwf	prodl,f,c
  1991  00059A  0E00               	movlw	0
  1992  00059C  22F4               	addwfc	prodh,f,c
  1993  00059E  0E00               	movlw	low _pin
  1994  0005A0  24F3               	addwf	prodl,w,c
  1995  0005A2  6ED9               	movwf	fsr2l,c
  1996  0005A4  0E01               	movlw	high _pin
  1997  0005A6  20F4               	addwfc	prodh,w,c
  1998  0005A8  6EDA               	movwf	fsr2h,c
  1999  0005AA  CFDE F062          	movff	postinc2,Set_Display@value
  2000  0005AE  CFDD F063          	movff	postdec2,Set_Display@value+1
  2001  0005B2  0E37               	movlw	55
  2002  0005B4  EC58  F006         	call	_Set_Display
  2003                           
  2004                           ;buttonchanges.c: 120: Delay_Routine(30);
  2005  0005B8  0E1E               	movlw	30
  2006  0005BA  EC87  F007         	call	_Delay_Routine
  2007                           
  2008                           ;buttonchanges.c: 121: __nop();
  2009  0005BE  F000               	nop	
  2010                           
  2011                           ;buttonchanges.c: 122: }
  2012                           ;buttonchanges.c: 123: } else if(PORTBbits.RB0 == 1) {
  2013  0005C0  0012               	return	
  2014  0005C2                     l106:
  2015  0005C2  A081               	btfss	3969,0,c	;volatile
  2016  0005C4  0012               	return	
  2017                           
  2018                           ;buttonchanges.c: 124: Delay_Routine(3);
  2019  0005C6  0E03               	movlw	3
  2020  0005C8  EC87  F007         	call	_Delay_Routine
  2021                           
  2022                           ;buttonchanges.c: 125: if(PORTBbits.RB0 == 1) {
  2023  0005CC  A081               	btfss	3969,0,c	;volatile
  2024  0005CE  0012               	return	
  2025                           
  2026                           ;buttonchanges.c: 126: if(PORTBbits.RB1 == 1) {
  2027  0005D0  A281               	btfss	3969,1,c	;volatile
  2028  0005D2  D007               	goto	l2631
  2029                           
  2030                           ;buttonchanges.c: 127: Delay_Routine(3);
  2031  0005D4  0E03               	movlw	3
  2032  0005D6  EC87  F007         	call	_Delay_Routine
  2033                           
  2034                           ;buttonchanges.c: 128: if(PORTBbits.RB1 == 1) {
  2035  0005DA  A281               	btfss	3969,1,c	;volatile
  2036  0005DC  D002               	goto	l2631
  2037                           
  2038                           ;buttonchanges.c: 129: testflag = 1;
  2039  0005DE  8442               	bsf	_testflag/(0+8),_testflag& (0+7),c
  2040                           
  2041                           ;buttonchanges.c: 130: return;
  2042  0005E0  0012               	return	
  2043  0005E2                     l2631:
  2044                           
  2045                           ;buttonchanges.c: 132: }
  2046                           ;buttonchanges.c: 133: }
  2047                           ;buttonchanges.c: 134: Save_Data(pin[pin_selected].time, pin[pin_selected].address);
  2048  0005E2  5035               	movf	_pin_selected,w,c
  2049  0005E4  0D06               	mullw	6
  2050  0005E6  0E04               	movlw	4
  2051  0005E8  26F3               	addwf	prodl,f,c
  2052  0005EA  0E00               	movlw	0
  2053  0005EC  22F4               	addwfc	prodh,f,c
  2054  0005EE  0E00               	movlw	low _pin
  2055  0005F0  24F3               	addwf	prodl,w,c
  2056  0005F2  6ED9               	movwf	fsr2l,c
  2057  0005F4  0E01               	movlw	high _pin
  2058  0005F6  20F4               	addwfc	prodh,w,c
  2059  0005F8  6EDA               	movwf	fsr2h,c
  2060  0005FA  CFDE F01D          	movff	postinc2,Save_Data@store
  2061  0005FE  CFDD F01E          	movff	postdec2,Save_Data@store+1
  2062  000602  5035               	movf	_pin_selected,w,c
  2063  000604  0D06               	mullw	6
  2064  000606  0E02               	movlw	2
  2065  000608  26F3               	addwf	prodl,f,c
  2066  00060A  0E00               	movlw	0
  2067  00060C  22F4               	addwfc	prodh,f,c
  2068  00060E  0E00               	movlw	low _pin
  2069  000610  24F3               	addwf	prodl,w,c
  2070  000612  6ED9               	movwf	fsr2l,c
  2071  000614  0E01               	movlw	high _pin
  2072  000616  20F4               	addwfc	prodh,w,c
  2073  000618  6EDA               	movwf	fsr2h,c
  2074  00061A  50DF               	movf	indf2,w,c
  2075  00061C  6E1F               	movwf	Save_Data@store_address,c
  2076  00061E  EC84  F006         	call	_Save_Data	;wreg free
  2077                           
  2078                           ;buttonchanges.c: 135: slave_selected++;
  2079  000622  2A37               	incf	_slave_selected,f,c
  2080                           
  2081                           ;buttonchanges.c: 136: if(slave_selected > 2) {
  2082  000624  0E02               	movlw	2
  2083  000626  6437               	cpfsgt	_slave_selected,c
  2084  000628  D002               	goto	l2639
  2085                           
  2086                           ;buttonchanges.c: 137: slave_selected = 0;
  2087  00062A  0E00               	movlw	0
  2088  00062C  6E37               	movwf	_slave_selected,c
  2089  00062E                     l2639:
  2090                           
  2091                           ;buttonchanges.c: 138: }
  2092                           ;buttonchanges.c: 139: pin_selected = slave_selected * 10;
  2093  00062E  5037               	movf	_slave_selected,w,c
  2094  000630  0D0A               	mullw	10
  2095  000632  CFF3 F035          	movff	prodl,_pin_selected
  2096                           
  2097                           ;buttonchanges.c: 140: pin[pin_selected].time = Read_Data(pin[pin_selected].address);
  2098  000636  5035               	movf	_pin_selected,w,c
  2099  000638  0D06               	mullw	6
  2100  00063A  0E02               	movlw	2
  2101  00063C  26F3               	addwf	prodl,f,c
  2102  00063E  0E00               	movlw	0
  2103  000640  22F4               	addwfc	prodh,f,c
  2104  000642  0E00               	movlw	low _pin
  2105  000644  24F3               	addwf	prodl,w,c
  2106  000646  6ED9               	movwf	fsr2l,c
  2107  000648  0E01               	movlw	high _pin
  2108  00064A  20F4               	addwfc	prodh,w,c
  2109  00064C  6EDA               	movwf	fsr2h,c
  2110  00064E  50DF               	movf	indf2,w,c
  2111  000650  EC0D  F007         	call	_Read_Data
  2112  000654  5035               	movf	_pin_selected,w,c
  2113  000656  0D06               	mullw	6
  2114  000658  0E04               	movlw	4
  2115  00065A  26F3               	addwf	prodl,f,c
  2116  00065C  0E00               	movlw	0
  2117  00065E  22F4               	addwfc	prodh,f,c
  2118  000660  0E00               	movlw	low _pin
  2119  000662  24F3               	addwf	prodl,w,c
  2120  000664  6ED9               	movwf	fsr2l,c
  2121  000666  0E01               	movlw	high _pin
  2122  000668  20F4               	addwfc	prodh,w,c
  2123  00066A  6EDA               	movwf	fsr2h,c
  2124  00066C  C01D  FFDE         	movff	?_Read_Data,postinc2
  2125  000670  C01E  FFDD         	movff	?_Read_Data+1,postdec2
  2126                           
  2127                           ;buttonchanges.c: 141: __nop();
  2128  000674  F000               	nop	
  2129                           
  2130                           ;buttonchanges.c: 142: Set_Display('7', 'E', pin[pin_selected].slave);
  2131  000676  0E45               	movlw	69
  2132  000678  0100               	movlb	0	; () banked
  2133  00067A  6F61               	movwf	Set_Display@information& (0+255),b
  2134  00067C  5035               	movf	_pin_selected,w,c
  2135  00067E  0D06               	mullw	6
  2136  000680  0E00               	movlw	low _pin
  2137  000682  24F3               	addwf	prodl,w,c
  2138  000684  6ED9               	movwf	fsr2l,c
  2139  000686  0E01               	movlw	high _pin
  2140  000688  20F4               	addwfc	prodh,w,c
  2141  00068A  6EDA               	movwf	fsr2h,c
  2142  00068C  50DF               	movf	indf2,w,c
  2143  00068E  0100               	movlb	0	; () banked
  2144  000690  6F68               	movwf	??_Check_Buttons& (0+255),b
  2145  000692  0100               	movlb	0	; () banked
  2146  000694  5168               	movf	??_Check_Buttons& (0+255),w,b
  2147  000696  0100               	movlb	0	; () banked
  2148  000698  6F62               	movwf	Set_Display@value& (0+255),b
  2149  00069A  6B63               	clrf	(Set_Display@value+1)& (0+255),b
  2150  00069C  0E37               	movlw	55
  2151  00069E  EC58  F006         	call	_Set_Display
  2152                           
  2153                           ;buttonchanges.c: 144: Delay_Routine(30);
  2154  0006A2  0E1E               	movlw	30
  2155  0006A4  EC87  F007         	call	_Delay_Routine
  2156                           
  2157                           ;buttonchanges.c: 145: Set_Display('7', 'A', pin[pin_selected].output);
  2158  0006A8  0E41               	movlw	65
  2159  0006AA  0100               	movlb	0	; () banked
  2160  0006AC  6F61               	movwf	Set_Display@information& (0+255),b
  2161  0006AE  5035               	movf	_pin_selected,w,c
  2162  0006B0  0D06               	mullw	6
  2163  0006B2  0E01               	movlw	1
  2164  0006B4  26F3               	addwf	prodl,f,c
  2165  0006B6  0E00               	movlw	0
  2166  0006B8  22F4               	addwfc	prodh,f,c
  2167  0006BA  0E00               	movlw	low _pin
  2168  0006BC  24F3               	addwf	prodl,w,c
  2169  0006BE  6ED9               	movwf	fsr2l,c
  2170  0006C0  0E01               	movlw	high _pin
  2171  0006C2  20F4               	addwfc	prodh,w,c
  2172  0006C4  6EDA               	movwf	fsr2h,c
  2173  0006C6  50DF               	movf	indf2,w,c
  2174  0006C8  0100               	movlb	0	; () banked
  2175  0006CA  6F68               	movwf	??_Check_Buttons& (0+255),b
  2176  0006CC  0100               	movlb	0	; () banked
  2177  0006CE  5168               	movf	??_Check_Buttons& (0+255),w,b
  2178  0006D0  0100               	movlb	0	; () banked
  2179  0006D2  6F62               	movwf	Set_Display@value& (0+255),b
  2180  0006D4  6B63               	clrf	(Set_Display@value+1)& (0+255),b
  2181  0006D6  0E37               	movlw	55
  2182  0006D8  EC58  F006         	call	_Set_Display
  2183                           
  2184                           ;buttonchanges.c: 146: Delay_Routine(30);
  2185  0006DC  0E1E               	movlw	30
  2186  0006DE  EC87  F007         	call	_Delay_Routine
  2187                           
  2188                           ;buttonchanges.c: 147: Set_Display('7', '-', pin[pin_selected].time);
  2189  0006E2  0E2D               	movlw	45
  2190  0006E4  0100               	movlb	0	; () banked
  2191  0006E6  6F61               	movwf	Set_Display@information& (0+255),b
  2192  0006E8  5035               	movf	_pin_selected,w,c
  2193  0006EA  0D06               	mullw	6
  2194  0006EC  0E04               	movlw	4
  2195  0006EE  26F3               	addwf	prodl,f,c
  2196  0006F0  0E00               	movlw	0
  2197  0006F2  22F4               	addwfc	prodh,f,c
  2198  0006F4  0E00               	movlw	low _pin
  2199  0006F6  24F3               	addwf	prodl,w,c
  2200  0006F8  6ED9               	movwf	fsr2l,c
  2201  0006FA  0E01               	movlw	high _pin
  2202  0006FC  20F4               	addwfc	prodh,w,c
  2203  0006FE  6EDA               	movwf	fsr2h,c
  2204  000700  CFDE F062          	movff	postinc2,Set_Display@value
  2205  000704  CFDD F063          	movff	postdec2,Set_Display@value+1
  2206  000708  0E37               	movlw	55
  2207  00070A  EC58  F006         	call	_Set_Display
  2208                           
  2209                           ;buttonchanges.c: 148: Delay_Routine(30);
  2210  00070E  0E1E               	movlw	30
  2211  000710  EC87  F007         	call	_Delay_Routine
  2212                           
  2213                           ;buttonchanges.c: 149: __nop();
  2214  000714  F000               	nop	
  2215  000716  0012               	return	
  2216  000718                     __end_of_Check_Buttons:
  2217                           	opt stack 0
  2218                           tblptru	equ	0xFF8
  2219                           tblptrh	equ	0xFF7
  2220                           tblptrl	equ	0xFF6
  2221                           tablat	equ	0xFF5
  2222                           prodh	equ	0xFF4
  2223                           prodl	equ	0xFF3
  2224                           intcon	equ	0xFF2
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1l	equ	0xFE1
  2229                           indf2	equ	0xFDF
  2230                           postinc2	equ	0xFDE
  2231                           postdec2	equ	0xFDD
  2232                           plusw2	equ	0xFDB
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _Del_Data *****************
  2238 ;; Defined at:
  2239 ;;		line 85 in file "storage.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  counter         1    7[BANK0 ] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;		None               void
  2246 ;; Registers used:
  2247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1
  2253 ;;      Params:         0       0       0
  2254 ;;      Locals:         0       1       0
  2255 ;;      Temps:          0       0       0
  2256 ;;      Totals:         0       1       0
  2257 ;;Total ram usage:        1 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    7
  2260 ;; This function calls:
  2261 ;;		_Delay_Routine
  2262 ;;		_Evaluate_Display
  2263 ;;		_Load_Data
  2264 ;;		_Save_Data
  2265 ;; This function is called by:
  2266 ;;		_Check_Buttons
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text11
  2271  000D9A                     __ptext11:
  2272                           	opt stack 0
  2273  000D9A                     _Del_Data:
  2274                           	opt stack 22
  2275                           
  2276                           ;storage.c: 86: Evaluate_Display(3, "DEL");
  2277                           
  2278                           ;incstack = 0
  2279  000D9A  0E4A               	movlw	low STR_2
  2280  000D9C  6E25               	movwf	Evaluate_Display@evaluate,c
  2281  000D9E  0E02               	movlw	high STR_2
  2282  000DA0  6E26               	movwf	Evaluate_Display@evaluate+1,c
  2283  000DA2  0E03               	movlw	3
  2284  000DA4  EC8C  F003         	call	_Evaluate_Display
  2285                           
  2286                           ;storage.c: 87: Delay_Routine(3);
  2287  000DA8  0E03               	movlw	3
  2288  000DAA  EC87  F007         	call	_Delay_Routine
  2289                           
  2290                           ;storage.c: 88: for(unsigned char counter = 0; counter < 30; counter++) {
  2291  000DAE  0E00               	movlw	0
  2292  000DB0  0100               	movlb	0	; () banked
  2293  000DB2  6F67               	movwf	Del_Data@counter& (0+255),b
  2294  000DB4                     l2491:
  2295                           
  2296                           ; BSR set to: 0
  2297  000DB4  0E1D               	movlw	29
  2298  000DB6  0100               	movlb	0	; () banked
  2299  000DB8  6567               	cpfsgt	Del_Data@counter& (0+255),b
  2300  000DBA  D001               	goto	l2495
  2301  000DBC  D00B               	goto	l2501
  2302  000DBE                     l2495:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;storage.c: 89: Save_Data(0, counter);
  2306  000DBE  0E00               	movlw	0
  2307  000DC0  6E1E               	movwf	Save_Data@store+1,c
  2308  000DC2  0E00               	movlw	0
  2309  000DC4  6E1D               	movwf	Save_Data@store,c
  2310  000DC6  C067  F01F         	movff	Del_Data@counter,Save_Data@store_address
  2311  000DCA  EC84  F006         	call	_Save_Data	;wreg free
  2312  000DCE  0100               	movlb	0	; () banked
  2313  000DD0  2B67               	incf	Del_Data@counter& (0+255),f,b
  2314  000DD2  D7F0               	goto	l2491
  2315  000DD4                     l2501:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;storage.c: 90: }
  2319                           ;storage.c: 91: Load_Data();
  2320  000DD4  ECAA  F004         	call	_Load_Data	;wreg free
  2321  000DD8  0012               	return		;funcret
  2322  000DDA                     __end_of_Del_Data:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           indf2	equ	0xFDF
  2336                           postinc2	equ	0xFDE
  2337                           postdec2	equ	0xFDD
  2338                           plusw2	equ	0xFDB
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _Save_Data *****************
  2344 ;; Defined at:
  2345 ;;		line 8 in file "storage.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  store           2   28[COMRAM] unsigned int 
  2348 ;;  store_addres    1   30[COMRAM] unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;		None               void
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1
  2360 ;;      Params:         3       0       0
  2361 ;;      Locals:         0       0       0
  2362 ;;      Temps:          0       0       0
  2363 ;;      Totals:         3       0       0
  2364 ;;Total ram usage:        3 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    2
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_Check_Buttons
  2371 ;;		_Del_Data
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text12
  2376  000D08                     __ptext12:
  2377                           	opt stack 0
  2378  000D08                     _Save_Data:
  2379                           	opt stack 27
  2380                           
  2381                           ;storage.c: 10: EEADR = store_address;
  2382                           
  2383                           ;incstack = 0
  2384  000D08  C01F  FFA9         	movff	Save_Data@store_address,4009	;volatile
  2385                           
  2386                           ;storage.c: 11: EEDATA = store;
  2387  000D0C  C01D  FFA8         	movff	Save_Data@store,4008	;volatile
  2388                           
  2389                           ;storage.c: 12: EECON1bits.EEPGD = 0;
  2390  000D10  9EA6               	bcf	4006,7,c	;volatile
  2391                           
  2392                           ;storage.c: 13: EECON1bits.CFGS = 0;
  2393  000D12  9CA6               	bcf	4006,6,c	;volatile
  2394                           
  2395                           ;storage.c: 14: INTCONbits.GIE = 0;
  2396  000D14  9EF2               	bcf	intcon,7,c	;volatile
  2397                           
  2398                           ;storage.c: 15: EECON1bits.WREN = 1;
  2399  000D16  84A6               	bsf	4006,2,c	;volatile
  2400                           
  2401                           ;storage.c: 16: EECON2 = 0x55;
  2402  000D18  0E55               	movlw	85
  2403  000D1A  6EA7               	movwf	4007,c	;volatile
  2404                           
  2405                           ;storage.c: 17: EECON2 = 0xAA;
  2406  000D1C  0EAA               	movlw	170
  2407  000D1E  6EA7               	movwf	4007,c	;volatile
  2408                           
  2409                           ;storage.c: 18: EECON1bits.WR = 1;
  2410  000D20  82A6               	bsf	4006,1,c	;volatile
  2411  000D22                     l315:
  2412  000D22  A8A1               	btfss	4001,4,c	;volatile
  2413  000D24  D7FE               	goto	l315
  2414                           
  2415                           ;storage.c: 20: PIR2bits.EEIF = 0;
  2416  000D26  98A1               	bcf	4001,4,c	;volatile
  2417                           
  2418                           ;storage.c: 21: store >>= 8;
  2419  000D28  501E               	movf	Save_Data@store+1,w,c
  2420  000D2A  6E1D               	movwf	Save_Data@store,c
  2421  000D2C  6A1E               	clrf	Save_Data@store+1,c
  2422                           
  2423                           ;storage.c: 22: store_address += 50;
  2424  000D2E  0E32               	movlw	50
  2425  000D30  261F               	addwf	Save_Data@store_address,f,c
  2426                           
  2427                           ;storage.c: 23: EEADR = store_address;
  2428  000D32  C01F  FFA9         	movff	Save_Data@store_address,4009	;volatile
  2429                           
  2430                           ;storage.c: 24: EEDATA = store;
  2431  000D36  C01D  FFA8         	movff	Save_Data@store,4008	;volatile
  2432                           
  2433                           ;storage.c: 25: EECON1bits.EEPGD = 0;
  2434  000D3A  9EA6               	bcf	4006,7,c	;volatile
  2435                           
  2436                           ;storage.c: 26: EECON1bits.CFGS = 0;
  2437  000D3C  9CA6               	bcf	4006,6,c	;volatile
  2438                           
  2439                           ;storage.c: 27: EECON1bits.WREN = 1;
  2440  000D3E  84A6               	bsf	4006,2,c	;volatile
  2441                           
  2442                           ;storage.c: 28: INTCONbits.GIE = 0;
  2443  000D40  9EF2               	bcf	intcon,7,c	;volatile
  2444                           
  2445                           ;storage.c: 29: EECON2 = 0x55;
  2446  000D42  0E55               	movlw	85
  2447  000D44  6EA7               	movwf	4007,c	;volatile
  2448                           
  2449                           ;storage.c: 30: EECON2 = 0xAA;
  2450  000D46  0EAA               	movlw	170
  2451  000D48  6EA7               	movwf	4007,c	;volatile
  2452                           
  2453                           ;storage.c: 31: EECON1bits.WR = 1;
  2454  000D4A  82A6               	bsf	4006,1,c	;volatile
  2455  000D4C                     l318:
  2456  000D4C  A8A1               	btfss	4001,4,c	;volatile
  2457  000D4E  D7FE               	goto	l318
  2458                           
  2459                           ;storage.c: 33: PIR2bits.EEIF = 0;
  2460  000D50  98A1               	bcf	4001,4,c	;volatile
  2461                           
  2462                           ;storage.c: 34: EECON1bits.WREN = 0;
  2463  000D52  94A6               	bcf	4006,2,c	;volatile
  2464                           
  2465                           ;storage.c: 35: INTCONbits.GIE = 1;
  2466  000D54  8EF2               	bsf	intcon,7,c	;volatile
  2467  000D56  0012               	return		;funcret
  2468  000D58                     __end_of_Save_Data:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           prodh	equ	0xFF4
  2475                           prodl	equ	0xFF3
  2476                           intcon	equ	0xFF2
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           postdec1	equ	0xFE5
  2480                           fsr1l	equ	0xFE1
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           plusw2	equ	0xFDB
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _Load_Data *****************
  2490 ;; Defined at:
  2491 ;;		line 65 in file "storage.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  counter         1    6[BANK0 ] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1
  2505 ;;      Params:         0       0       0
  2506 ;;      Locals:         0       1       0
  2507 ;;      Temps:          0       1       0
  2508 ;;      Totals:         0       2       0
  2509 ;;Total ram usage:        2 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    6
  2512 ;; This function calls:
  2513 ;;		_Delay_Routine
  2514 ;;		_Evaluate_Display
  2515 ;;		_Read_Data
  2516 ;;		_Set_Display
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;;		_Del_Data
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text13
  2524  000954                     __ptext13:
  2525                           	opt stack 0
  2526  000954                     _Load_Data:
  2527                           	opt stack 24
  2528                           
  2529                           ;storage.c: 66: Evaluate_Display(3, "LOA");
  2530                           
  2531                           ;incstack = 0
  2532  000954  0E46               	movlw	low STR_1
  2533  000956  6E25               	movwf	Evaluate_Display@evaluate,c
  2534  000958  0E02               	movlw	high STR_1
  2535  00095A  6E26               	movwf	Evaluate_Display@evaluate+1,c
  2536  00095C  0E03               	movlw	3
  2537  00095E  EC8C  F003         	call	_Evaluate_Display
  2538                           
  2539                           ;storage.c: 67: Delay_Routine(3);
  2540  000962  0E03               	movlw	3
  2541  000964  EC87  F007         	call	_Delay_Routine
  2542                           
  2543                           ;storage.c: 68: for(unsigned char counter = 0; counter < 30; counter++) {
  2544  000968  0E00               	movlw	0
  2545  00096A  0100               	movlb	0	; () banked
  2546  00096C  6F66               	movwf	Load_Data@counter& (0+255),b
  2547  00096E                     l2433:
  2548                           
  2549                           ; BSR set to: 0
  2550  00096E  0E1D               	movlw	29
  2551  000970  0100               	movlb	0	; () banked
  2552  000972  6566               	cpfsgt	Load_Data@counter& (0+255),b
  2553  000974  D001               	goto	l2437
  2554  000976  D018               	goto	l2443
  2555  000978                     l2437:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;storage.c: 69: pin[counter].time = Read_Data(counter);
  2559  000978  0100               	movlb	0	; () banked
  2560  00097A  5166               	movf	Load_Data@counter& (0+255),w,b
  2561  00097C  EC0D  F007         	call	_Read_Data
  2562  000980  0100               	movlb	0	; () banked
  2563  000982  5166               	movf	Load_Data@counter& (0+255),w,b
  2564  000984  0D06               	mullw	6
  2565  000986  0E04               	movlw	4
  2566  000988  26F3               	addwf	prodl,f,c
  2567  00098A  0E00               	movlw	0
  2568  00098C  22F4               	addwfc	prodh,f,c
  2569  00098E  0E00               	movlw	low _pin
  2570  000990  24F3               	addwf	prodl,w,c
  2571  000992  6ED9               	movwf	fsr2l,c
  2572  000994  0E01               	movlw	high _pin
  2573  000996  20F4               	addwfc	prodh,w,c
  2574  000998  6EDA               	movwf	fsr2h,c
  2575  00099A  C01D  FFDE         	movff	?_Read_Data,postinc2
  2576  00099E  C01E  FFDD         	movff	?_Read_Data+1,postdec2
  2577                           
  2578                           ; BSR set to: 0
  2579  0009A2  0100               	movlb	0	; () banked
  2580  0009A4  2B66               	incf	Load_Data@counter& (0+255),f,b
  2581  0009A6  D7E3               	goto	l2433
  2582  0009A8                     l2443:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;storage.c: 70: }
  2586                           ;storage.c: 71: slave_selected = 0;
  2587  0009A8  0E00               	movlw	0
  2588  0009AA  6E37               	movwf	_slave_selected,c
  2589                           
  2590                           ;storage.c: 72: pin_selected = 0;
  2591  0009AC  0E00               	movlw	0
  2592  0009AE  6E35               	movwf	_pin_selected,c
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;storage.c: 73: Set_Display('7', 'E', pin[pin_selected].slave);
  2596  0009B0  0E45               	movlw	69
  2597  0009B2  0100               	movlb	0	; () banked
  2598  0009B4  6F61               	movwf	Set_Display@information& (0+255),b
  2599  0009B6  5035               	movf	_pin_selected,w,c
  2600  0009B8  0D06               	mullw	6
  2601  0009BA  0E00               	movlw	low _pin
  2602  0009BC  24F3               	addwf	prodl,w,c
  2603  0009BE  6ED9               	movwf	fsr2l,c
  2604  0009C0  0E01               	movlw	high _pin
  2605  0009C2  20F4               	addwfc	prodh,w,c
  2606  0009C4  6EDA               	movwf	fsr2h,c
  2607  0009C6  50DF               	movf	indf2,w,c
  2608  0009C8  0100               	movlb	0	; () banked
  2609  0009CA  6F65               	movwf	??_Load_Data& (0+255),b
  2610  0009CC  0100               	movlb	0	; () banked
  2611  0009CE  5165               	movf	??_Load_Data& (0+255),w,b
  2612  0009D0  0100               	movlb	0	; () banked
  2613  0009D2  6F62               	movwf	Set_Display@value& (0+255),b
  2614  0009D4  6B63               	clrf	(Set_Display@value+1)& (0+255),b
  2615  0009D6  0E37               	movlw	55
  2616  0009D8  EC58  F006         	call	_Set_Display
  2617                           
  2618                           ;storage.c: 75: Delay_Routine(20);
  2619  0009DC  0E14               	movlw	20
  2620  0009DE  EC87  F007         	call	_Delay_Routine
  2621                           
  2622                           ;storage.c: 76: Set_Display('7', 'A', pin[pin_selected].output);
  2623  0009E2  0E41               	movlw	65
  2624  0009E4  0100               	movlb	0	; () banked
  2625  0009E6  6F61               	movwf	Set_Display@information& (0+255),b
  2626  0009E8  5035               	movf	_pin_selected,w,c
  2627  0009EA  0D06               	mullw	6
  2628  0009EC  0E01               	movlw	1
  2629  0009EE  26F3               	addwf	prodl,f,c
  2630  0009F0  0E00               	movlw	0
  2631  0009F2  22F4               	addwfc	prodh,f,c
  2632  0009F4  0E00               	movlw	low _pin
  2633  0009F6  24F3               	addwf	prodl,w,c
  2634  0009F8  6ED9               	movwf	fsr2l,c
  2635  0009FA  0E01               	movlw	high _pin
  2636  0009FC  20F4               	addwfc	prodh,w,c
  2637  0009FE  6EDA               	movwf	fsr2h,c
  2638  000A00  50DF               	movf	indf2,w,c
  2639  000A02  0100               	movlb	0	; () banked
  2640  000A04  6F65               	movwf	??_Load_Data& (0+255),b
  2641  000A06  0100               	movlb	0	; () banked
  2642  000A08  5165               	movf	??_Load_Data& (0+255),w,b
  2643  000A0A  0100               	movlb	0	; () banked
  2644  000A0C  6F62               	movwf	Set_Display@value& (0+255),b
  2645  000A0E  6B63               	clrf	(Set_Display@value+1)& (0+255),b
  2646  000A10  0E37               	movlw	55
  2647  000A12  EC58  F006         	call	_Set_Display
  2648                           
  2649                           ;storage.c: 77: Delay_Routine(20);
  2650  000A16  0E14               	movlw	20
  2651  000A18  EC87  F007         	call	_Delay_Routine
  2652                           
  2653                           ;storage.c: 78: Set_Display('7', '-', pin[pin_selected].time);
  2654  000A1C  0E2D               	movlw	45
  2655  000A1E  0100               	movlb	0	; () banked
  2656  000A20  6F61               	movwf	Set_Display@information& (0+255),b
  2657  000A22  5035               	movf	_pin_selected,w,c
  2658  000A24  0D06               	mullw	6
  2659  000A26  0E04               	movlw	4
  2660  000A28  26F3               	addwf	prodl,f,c
  2661  000A2A  0E00               	movlw	0
  2662  000A2C  22F4               	addwfc	prodh,f,c
  2663  000A2E  0E00               	movlw	low _pin
  2664  000A30  24F3               	addwf	prodl,w,c
  2665  000A32  6ED9               	movwf	fsr2l,c
  2666  000A34  0E01               	movlw	high _pin
  2667  000A36  20F4               	addwfc	prodh,w,c
  2668  000A38  6EDA               	movwf	fsr2h,c
  2669  000A3A  CFDE F062          	movff	postinc2,Set_Display@value
  2670  000A3E  CFDD F063          	movff	postdec2,Set_Display@value+1
  2671  000A42  0E37               	movlw	55
  2672  000A44  EC58  F006         	call	_Set_Display
  2673                           
  2674                           ;storage.c: 79: Delay_Routine(20);
  2675  000A48  0E14               	movlw	20
  2676  000A4A  EC87  F007         	call	_Delay_Routine
  2677  000A4E  0012               	return		;funcret
  2678  000A50                     __end_of_Load_Data:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           prodh	equ	0xFF4
  2685                           prodl	equ	0xFF3
  2686                           intcon	equ	0xFF2
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           plusw2	equ	0xFDB
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _Set_Display *****************
  2700 ;; Defined at:
  2701 ;;		line 135 in file "display.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  type            1    wreg     unsigned char 
  2704 ;;  information     1    1[BANK0 ] unsigned char 
  2705 ;;  value           2    2[BANK0 ] unsigned int 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  type            1    4[BANK0 ] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;		None               void
  2710 ;; Registers used:
  2711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1
  2717 ;;      Params:         0       3       0
  2718 ;;      Locals:         0       1       0
  2719 ;;      Temps:          0       0       0
  2720 ;;      Totals:         0       4       0
  2721 ;;Total ram usage:        4 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    5
  2724 ;; This function calls:
  2725 ;;		_Evaluate_Display
  2726 ;;		_Evaluate_Signs
  2727 ;;		_Write_Display_Byte
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;;		_Check_Buttons
  2731 ;;		_Load_Data
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text14
  2736  000CB0                     __ptext14:
  2737                           	opt stack 0
  2738  000CB0                     _Set_Display:
  2739                           	opt stack 25
  2740                           
  2741                           ;incstack = 0
  2742                           ;Set_Display@type stored from wreg
  2743  000CB0  0100               	movlb	0	; () banked
  2744  000CB2  6F64               	movwf	Set_Display@type& (0+255),b
  2745                           
  2746                           ;display.c: 137: switch (type) {
  2747  000CB4  D01C               	goto	l2391
  2748  000CB6                     l2375:
  2749                           
  2750                           ;display.c: 139: if(information != '-') {
  2751  000CB6  0E2D               	movlw	45
  2752  000CB8  0100               	movlb	0	; () banked
  2753  000CBA  1961               	xorwf	Set_Display@information& (0+255),w,b
  2754  000CBC  B4D8               	btfsc	status,2,c
  2755  000CBE  D010               	goto	l2387
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;display.c: 140: signs[0] = value;
  2759  000CC0  C062  F03F         	movff	Set_Display@value,_signs
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;display.c: 141: signs[0] += 0x30;
  2763  000CC4  0E30               	movlw	48
  2764  000CC6  263F               	addwf	_signs,f,c
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;display.c: 142: signs[1] = '-';
  2768  000CC8  0E2D               	movlw	45
  2769  000CCA  6E40               	movwf	_signs+1,c
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;display.c: 143: signs[2] = information;
  2773  000CCC  C061  F041         	movff	Set_Display@information,_signs+2
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;display.c: 144: Evaluate_Display(sizeof(signs), signs);
  2777  000CD0  0E3F               	movlw	low _signs
  2778  000CD2  6E25               	movwf	Evaluate_Display@evaluate,c
  2779  000CD4  0E00               	movlw	high _signs
  2780  000CD6  6E26               	movwf	Evaluate_Display@evaluate+1,c
  2781  000CD8  0E03               	movlw	3
  2782  000CDA  EC8C  F003         	call	_Evaluate_Display
  2783                           
  2784                           ;display.c: 145: } else {
  2785  000CDE  D00D               	goto	l2393
  2786  000CE0                     l2387:
  2787                           
  2788                           ;display.c: 146: Evaluate_Signs(value);
  2789  000CE0  C062  F02A         	movff	Set_Display@value,Evaluate_Signs@evaluation_value
  2790  000CE4  C063  F02B         	movff	Set_Display@value+1,Evaluate_Signs@evaluation_value+1
  2791  000CE8  EC21  F006         	call	_Evaluate_Signs	;wreg free
  2792                           
  2793                           ;display.c: 152: }
  2794                           
  2795                           ;display.c: 151: break;
  2796                           
  2797                           ;display.c: 149: case 'L':
  2798                           
  2799                           ;display.c: 147: }
  2800                           ;display.c: 148: break;
  2801  000CEC  D006               	goto	l2393
  2802  000CEE                     l2391:
  2803  000CEE  0100               	movlb	0	; () banked
  2804  000CF0  5164               	movf	Set_Display@type& (0+255),w,b
  2805                           
  2806                           ; Switch size 1, requested type "space"
  2807                           ; Number of cases is 2, Range of values is 55 to 76
  2808                           ; switch strategies available:
  2809                           ; Name         Instructions Cycles
  2810                           ; simple_byte            7     4 (average)
  2811                           ;	Chosen strategy is simple_byte
  2812  000CF2  0A37               	xorlw	55	; case 55
  2813  000CF4  B4D8               	btfsc	status,2,c
  2814  000CF6  D7DF               	goto	l2375
  2815  000CF8  0A7B               	xorlw	123	; case 76
  2816  000CFA                     l2393:
  2817                           
  2818                           ;display.c: 153: Write_Display_Byte(pixels);
  2819  000CFA  0E38               	movlw	low _pixels
  2820  000CFC  6E1D               	movwf	Write_Display_Byte@write_data,c
  2821  000CFE  0E00               	movlw	high _pixels
  2822  000D00  6E1E               	movwf	Write_Display_Byte@write_data+1,c
  2823  000D02  ECED  F006         	call	_Write_Display_Byte	;wreg free
  2824  000D06  0012               	return		;funcret
  2825  000D08                     __end_of_Set_Display:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           plusw2	equ	0xFDB
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _Write_Display_Byte *****************
  2847 ;; Defined at:
  2848 ;;		line 40 in file "communication.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  write_data      2   28[COMRAM] PTR unsigned char 
  2851 ;;		 -> pixels(7), 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  counter         1   34[COMRAM] unsigned char 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;		None               void
  2856 ;; Registers used:
  2857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1
  2863 ;;      Params:         2       0       0
  2864 ;;      Locals:         1       0       0
  2865 ;;      Temps:          4       0       0
  2866 ;;      Totals:         7       0       0
  2867 ;;Total ram usage:        7 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_Set_Display
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text15
  2878  000DDA                     __ptext15:
  2879                           	opt stack 0
  2880  000DDA                     _Write_Display_Byte:
  2881                           	opt stack 27
  2882                           
  2883                           ;communication.c: 41: for(unsigned char counter = sizeof(pixels); counter > 0;
  2884                           
  2885                           ;incstack = 0
  2886  000DDA  0E07               	movlw	7
  2887  000DDC  6E23               	movwf	Write_Display_Byte@counter,c
  2888  000DDE                     
  2889                           ;communication.c: 42: counter--) {
  2890  000DDE  5023               	movf	Write_Display_Byte@counter,w,c
  2891  000DE0  B4D8               	btfsc	status,2,c
  2892  000DE2  0012               	return	
  2893                           
  2894                           ;communication.c: 43: if(SSP1IF = 1) {
  2895  000DE4  869E               	bsf	3998,3,c	;volatile
  2896  000DE6  B69E               	btfsc	3998,3,c	;volatile
  2897                           
  2898                           ;communication.c: 44: SSP1IF = 0;
  2899  000DE8  969E               	bcf	3998,3,c	;volatile
  2900                           
  2901                           ;communication.c: 45: }
  2902                           ;communication.c: 46: SSP1BUF = write_data[counter - 1];
  2903  000DEA  0EFF               	movlw	255
  2904  000DEC  6E1F               	movwf	??_Write_Display_Byte& (0+255),c
  2905  000DEE  0EFF               	movlw	255
  2906  000DF0  6E20               	movwf	(??_Write_Display_Byte+1)& (0+255),c
  2907  000DF2  5023               	movf	Write_Display_Byte@counter,w,c
  2908  000DF4  6E21               	movwf	(??_Write_Display_Byte+2)& (0+255),c
  2909  000DF6  6A22               	clrf	(??_Write_Display_Byte+3)& (0+255),c
  2910  000DF8  501F               	movf	??_Write_Display_Byte,w,c
  2911  000DFA  2621               	addwf	??_Write_Display_Byte+2,f,c
  2912  000DFC  5020               	movf	??_Write_Display_Byte+1,w,c
  2913  000DFE  2222               	addwfc	??_Write_Display_Byte+3,f,c
  2914  000E00  5021               	movf	??_Write_Display_Byte+2,w,c
  2915  000E02  241D               	addwf	Write_Display_Byte@write_data,w,c
  2916  000E04  6ED9               	movwf	fsr2l,c
  2917  000E06  5022               	movf	??_Write_Display_Byte+3,w,c
  2918  000E08  201E               	addwfc	Write_Display_Byte@write_data+1,w,c
  2919  000E0A  6EDA               	movwf	fsr2h,c
  2920  000E0C  50DF               	movf	indf2,w,c
  2921  000E0E  6EC9               	movwf	4041,c	;volatile
  2922  000E10                     l479:
  2923  000E10  A69E               	btfss	3998,3,c	;volatile
  2924  000E12  D7FE               	goto	l479
  2925                           
  2926                           ;communication.c: 48: SSP1IF = 0;
  2927  000E14  969E               	bcf	3998,3,c	;volatile
  2928  000E16  0623               	decf	Write_Display_Byte@counter,f,c
  2929  000E18  D7E2               	goto	L3
  2930  000E1A                     __end_of_Write_Display_Byte:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1l	equ	0xFE1
  2943                           indf2	equ	0xFDF
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           plusw2	equ	0xFDB
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _Evaluate_Signs *****************
  2952 ;; Defined at:
  2953 ;;		line 115 in file "display.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  evaluation_v    2   41[COMRAM] unsigned int 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  valuecounter    1    0[BANK0 ] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;		None               void
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1
  2967 ;;      Params:         2       0       0
  2968 ;;      Locals:         0       1       0
  2969 ;;      Temps:          0       0       0
  2970 ;;      Totals:         2       1       0
  2971 ;;Total ram usage:        3 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    4
  2974 ;; This function calls:
  2975 ;;		_Evaluate_Display
  2976 ;;		___lwmod
  2977 ;; This function is called by:
  2978 ;;		_Set_Display
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text16
  2983  000C42                     __ptext16:
  2984                           	opt stack 0
  2985  000C42                     _Evaluate_Signs:
  2986                           	opt stack 25
  2987                           
  2988                           ;display.c: 116: for(unsigned char valuecounter = 0; valuecounter < sizeof(signs);
  2989                           
  2990                           ;incstack = 0
  2991  000C42  0E00               	movlw	0
  2992  000C44  0100               	movlb	0	; () banked
  2993  000C46  6F60               	movwf	Evaluate_Signs@valuecounter& (0+255),b
  2994  000C48                     l2337:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;display.c: 117: valuecounter++) {
  2998  000C48  0E02               	movlw	2
  2999  000C4A  0100               	movlb	0	; () banked
  3000  000C4C  6560               	cpfsgt	Evaluate_Signs@valuecounter& (0+255),b
  3001  000C4E  D001               	goto	l2341
  3002  000C50  D026               	goto	l403
  3003  000C52                     l2341:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;display.c: 118: signs[valuecounter] = evaluation_value % 10;
  3007  000C52  0100               	movlb	0	; () banked
  3008  000C54  5160               	movf	Evaluate_Signs@valuecounter& (0+255),w,b
  3009  000C56  0D01               	mullw	1
  3010  000C58  0E3F               	movlw	low _signs
  3011  000C5A  24F3               	addwf	prodl,w,c
  3012  000C5C  6ED9               	movwf	fsr2l,c
  3013  000C5E  0E00               	movlw	high _signs
  3014  000C60  20F4               	addwfc	prodh,w,c
  3015  000C62  6EDA               	movwf	fsr2h,c
  3016  000C64  C02A  F01D         	movff	Evaluate_Signs@evaluation_value,___lwmod@dividend
  3017  000C68  C02B  F01E         	movff	Evaluate_Signs@evaluation_value+1,___lwmod@dividend+1
  3018  000C6C  0E00               	movlw	0
  3019  000C6E  6E20               	movwf	___lwmod@divisor+1,c
  3020  000C70  0E0A               	movlw	10
  3021  000C72  6E1F               	movwf	___lwmod@divisor,c
  3022  000C74  ECAC  F006         	call	___lwmod	;wreg free
  3023  000C78  501D               	movf	?___lwmod,w,c
  3024  000C7A  6EDF               	movwf	indf2,c
  3025                           
  3026                           ;display.c: 119: signs[valuecounter] += 0x30;
  3027  000C7C  0100               	movlb	0	; () banked
  3028  000C7E  5160               	movf	Evaluate_Signs@valuecounter& (0+255),w,b
  3029  000C80  0D01               	mullw	1
  3030  000C82  0E3F               	movlw	low _signs
  3031  000C84  24F3               	addwf	prodl,w,c
  3032  000C86  6ED9               	movwf	fsr2l,c
  3033  000C88  0E00               	movlw	high _signs
  3034  000C8A  20F4               	addwfc	prodh,w,c
  3035  000C8C  6EDA               	movwf	fsr2h,c
  3036  000C8E  0E30               	movlw	48
  3037  000C90  26DF               	addwf	indf2,f,c
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;display.c: 120: evaluation_value >>= 1;
  3041  000C92  90D8               	bcf	status,0,c
  3042  000C94  322B               	rrcf	Evaluate_Signs@evaluation_value+1,f,c
  3043  000C96  322A               	rrcf	Evaluate_Signs@evaluation_value,f,c
  3044                           
  3045                           ; BSR set to: 0
  3046  000C98  0100               	movlb	0	; () banked
  3047  000C9A  2B60               	incf	Evaluate_Signs@valuecounter& (0+255),f,b
  3048  000C9C  D7D5               	goto	l2337
  3049  000C9E                     l403:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;display.c: 121: }
  3053                           ;display.c: 122: __nop();
  3054  000C9E  F000               	nop	
  3055                           
  3056                           ;display.c: 123: Evaluate_Display(sizeof(signs), signs);
  3057  000CA0  0E3F               	movlw	low _signs
  3058  000CA2  6E25               	movwf	Evaluate_Display@evaluate,c
  3059  000CA4  0E00               	movlw	high _signs
  3060  000CA6  6E26               	movwf	Evaluate_Display@evaluate+1,c
  3061  000CA8  0E03               	movlw	3
  3062  000CAA  EC8C  F003         	call	_Evaluate_Display
  3063  000CAE  0012               	return		;funcret
  3064  000CB0                     __end_of_Evaluate_Signs:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           postinc0	equ	0xFEE
  3074                           wreg	equ	0xFE8
  3075                           postdec1	equ	0xFE5
  3076                           fsr1l	equ	0xFE1
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           plusw2	equ	0xFDB
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function ___lwmod *****************
  3086 ;; Defined at:
  3087 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  dividend        2   28[COMRAM] unsigned int 
  3090 ;;  divisor         2   30[COMRAM] unsigned int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  counter         1   32[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  2   28[COMRAM] unsigned int 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1
  3102 ;;      Params:         4       0       0
  3103 ;;      Locals:         1       0       0
  3104 ;;      Temps:          0       0       0
  3105 ;;      Totals:         5       0       0
  3106 ;;Total ram usage:        5 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    2
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_Evaluate_Signs
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text17
  3117  000D58                     __ptext17:
  3118                           	opt stack 0
  3119  000D58                     ___lwmod:
  3120                           	opt stack 26
  3121                           
  3122                           ;incstack = 0
  3123  000D58  501F               	movf	___lwmod@divisor,w,c
  3124  000D5A  1020               	iorwf	___lwmod@divisor+1,w,c
  3125  000D5C  B4D8               	btfsc	status,2,c
  3126  000D5E  D018               	goto	l944
  3127  000D60  0E01               	movlw	1
  3128  000D62  6E21               	movwf	___lwmod@counter,c
  3129  000D64  D004               	goto	l2325
  3130  000D66                     l2323:
  3131  000D66  90D8               	bcf	status,0,c
  3132  000D68  361F               	rlcf	___lwmod@divisor,f,c
  3133  000D6A  3620               	rlcf	___lwmod@divisor+1,f,c
  3134  000D6C  2A21               	incf	___lwmod@counter,f,c
  3135  000D6E                     l2325:
  3136  000D6E  AE20               	btfss	___lwmod@divisor+1,7,c
  3137  000D70  D7FA               	goto	l2323
  3138  000D72                     l2327:
  3139  000D72  501F               	movf	___lwmod@divisor,w,c
  3140  000D74  5C1D               	subwf	___lwmod@dividend,w,c
  3141  000D76  5020               	movf	___lwmod@divisor+1,w,c
  3142  000D78  581E               	subwfb	___lwmod@dividend+1,w,c
  3143  000D7A  A0D8               	btfss	status,0,c
  3144  000D7C  D004               	goto	l2331
  3145  000D7E  501F               	movf	___lwmod@divisor,w,c
  3146  000D80  5E1D               	subwf	___lwmod@dividend,f,c
  3147  000D82  5020               	movf	___lwmod@divisor+1,w,c
  3148  000D84  5A1E               	subwfb	___lwmod@dividend+1,f,c
  3149  000D86                     l2331:
  3150  000D86  90D8               	bcf	status,0,c
  3151  000D88  3220               	rrcf	___lwmod@divisor+1,f,c
  3152  000D8A  321F               	rrcf	___lwmod@divisor,f,c
  3153  000D8C  2E21               	decfsz	___lwmod@counter,f,c
  3154  000D8E  D7F1               	goto	l2327
  3155  000D90                     l944:
  3156  000D90  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  3157  000D94  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  3158  000D98  0012               	return		;funcret
  3159  000D9A                     __end_of___lwmod:
  3160                           	opt stack 0
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           plusw2	equ	0xFDB
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _Evaluate_Display *****************
  3181 ;; Defined at:
  3182 ;;		line 52 in file "display.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  size            1    wreg     unsigned char 
  3185 ;;  evaluate        2   36[COMRAM] PTR const unsigned char 
  3186 ;;		 -> signs(3), STR_2(4), STR_1(4), 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  size            1   40[COMRAM] unsigned char 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;		None               void
  3191 ;; Registers used:
  3192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1
  3198 ;;      Params:         2       0       0
  3199 ;;      Locals:         1       0       0
  3200 ;;      Temps:          2       0       0
  3201 ;;      Totals:         5       0       0
  3202 ;;Total ram usage:        5 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    3
  3205 ;; This function calls:
  3206 ;;		_Set_Bits
  3207 ;; This function is called by:
  3208 ;;		_Load_Data
  3209 ;;		_Del_Data
  3210 ;;		_Evaluate_Signs
  3211 ;;		_Set_Display
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text18
  3216  000718                     __ptext18:
  3217                           	opt stack 0
  3218  000718                     _Evaluate_Display:
  3219                           	opt stack 25
  3220                           
  3221                           ;incstack = 0
  3222                           ;Evaluate_Display@size stored from wreg
  3223  000718  6E29               	movwf	Evaluate_Display@size,c
  3224                           
  3225                           ;display.c: 53: for(display_counter = 0; display_counter < size;
  3226  00071A  0E00               	movlw	0
  3227  00071C  6E33               	movwf	_display_counter,c
  3228                           
  3229                           ;display.c: 54: display_counter++) {
  3230  00071E  D115               	goto	l2317
  3231  000720                     l2279:
  3232                           
  3233                           ;display.c: 57: Set_Bits("ABCDEF");
  3234  000720  0E09               	movlw	low STR_3
  3235  000722  6E1D               	movwf	Set_Bits@bits,c
  3236  000724  0E02               	movlw	high STR_3
  3237  000726  6E1E               	movwf	Set_Bits@bits+1,c
  3238  000728  501D               	movf	Set_Bits@bits,w,c
  3239  00072A  101E               	iorwf	Set_Bits@bits+1,w,c
  3240  00072C  A4D8               	btfss	status,2,c
  3241  00072E  0E00               	movlw	low (__mediumconst shr (0+16))
  3242  000730  6E1F               	movwf	Set_Bits@bits+2,c
  3243  000732  EC28  F005         	call	_Set_Bits	;wreg free
  3244                           
  3245                           ;display.c: 58: break;
  3246  000736  D108               	goto	l2315
  3247  000738                     l2281:
  3248                           
  3249                           ;display.c: 60: Set_Bits("BC");
  3250  000738  0E43               	movlw	low (STR_10+1)
  3251  00073A  6E1D               	movwf	Set_Bits@bits,c
  3252  00073C  0E02               	movlw	high (STR_10+1)
  3253  00073E  6E1E               	movwf	Set_Bits@bits+1,c
  3254  000740  501D               	movf	Set_Bits@bits,w,c
  3255  000742  101E               	iorwf	Set_Bits@bits+1,w,c
  3256  000744  A4D8               	btfss	status,2,c
  3257  000746  0E00               	movlw	low (__mediumconst shr (0+16))
  3258  000748  6E1F               	movwf	Set_Bits@bits+2,c
  3259  00074A  EC28  F005         	call	_Set_Bits	;wreg free
  3260                           
  3261                           ;display.c: 61: break;
  3262  00074E  D0FC               	goto	l2315
  3263  000750                     l2283:
  3264                           
  3265                           ;display.c: 63: Set_Bits("ABDEG");
  3266  000750  0E2B               	movlw	low STR_5
  3267  000752  6E1D               	movwf	Set_Bits@bits,c
  3268  000754  0E02               	movlw	high STR_5
  3269  000756  6E1E               	movwf	Set_Bits@bits+1,c
  3270  000758  501D               	movf	Set_Bits@bits,w,c
  3271  00075A  101E               	iorwf	Set_Bits@bits+1,w,c
  3272  00075C  A4D8               	btfss	status,2,c
  3273  00075E  0E00               	movlw	low (__mediumconst shr (0+16))
  3274  000760  6E1F               	movwf	Set_Bits@bits+2,c
  3275  000762  EC28  F005         	call	_Set_Bits	;wreg free
  3276                           
  3277                           ;display.c: 64: break;
  3278  000766  D0F0               	goto	l2315
  3279  000768                     l2285:
  3280                           
  3281                           ;display.c: 66: Set_Bits("ABCDG");
  3282  000768  0E25               	movlw	low STR_6
  3283  00076A  6E1D               	movwf	Set_Bits@bits,c
  3284  00076C  0E02               	movlw	high STR_6
  3285  00076E  6E1E               	movwf	Set_Bits@bits+1,c
  3286  000770  501D               	movf	Set_Bits@bits,w,c
  3287  000772  101E               	iorwf	Set_Bits@bits+1,w,c
  3288  000774  A4D8               	btfss	status,2,c
  3289  000776  0E00               	movlw	low (__mediumconst shr (0+16))
  3290  000778  6E1F               	movwf	Set_Bits@bits+2,c
  3291  00077A  EC28  F005         	call	_Set_Bits	;wreg free
  3292                           
  3293                           ;display.c: 67: break;
  3294  00077E  D0E4               	goto	l2315
  3295  000780                     l2287:
  3296                           
  3297                           ;display.c: 69: Set_Bits("BCFG");
  3298  000780  0E3D               	movlw	low STR_7
  3299  000782  6E1D               	movwf	Set_Bits@bits,c
  3300  000784  0E02               	movlw	high STR_7
  3301  000786  6E1E               	movwf	Set_Bits@bits+1,c
  3302  000788  501D               	movf	Set_Bits@bits,w,c
  3303  00078A  101E               	iorwf	Set_Bits@bits+1,w,c
  3304  00078C  A4D8               	btfss	status,2,c
  3305  00078E  0E00               	movlw	low (__mediumconst shr (0+16))
  3306  000790  6E1F               	movwf	Set_Bits@bits+2,c
  3307  000792  EC28  F005         	call	_Set_Bits	;wreg free
  3308                           
  3309                           ;display.c: 70: break;
  3310  000796  D0D8               	goto	l2315
  3311  000798                     l2289:
  3312                           
  3313                           ;display.c: 72: Set_Bits("ACDFG");
  3314  000798  0E31               	movlw	low STR_8
  3315  00079A  6E1D               	movwf	Set_Bits@bits,c
  3316  00079C  0E02               	movlw	high STR_8
  3317  00079E  6E1E               	movwf	Set_Bits@bits+1,c
  3318  0007A0  501D               	movf	Set_Bits@bits,w,c
  3319  0007A2  101E               	iorwf	Set_Bits@bits+1,w,c
  3320  0007A4  A4D8               	btfss	status,2,c
  3321  0007A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3322  0007A8  6E1F               	movwf	Set_Bits@bits+2,c
  3323  0007AA  EC28  F005         	call	_Set_Bits	;wreg free
  3324                           
  3325                           ;display.c: 73: break;
  3326  0007AE  D0CC               	goto	l2315
  3327  0007B0                     l2291:
  3328                           
  3329                           ;display.c: 75: Set_Bits("ACDEFG");
  3330  0007B0  0E1E               	movlw	low STR_9
  3331  0007B2  6E1D               	movwf	Set_Bits@bits,c
  3332  0007B4  0E02               	movlw	high STR_9
  3333  0007B6  6E1E               	movwf	Set_Bits@bits+1,c
  3334  0007B8  501D               	movf	Set_Bits@bits,w,c
  3335  0007BA  101E               	iorwf	Set_Bits@bits+1,w,c
  3336  0007BC  A4D8               	btfss	status,2,c
  3337  0007BE  0E00               	movlw	low (__mediumconst shr (0+16))
  3338  0007C0  6E1F               	movwf	Set_Bits@bits+2,c
  3339  0007C2  EC28  F005         	call	_Set_Bits	;wreg free
  3340                           
  3341                           ;display.c: 76: break;
  3342  0007C6  D0C0               	goto	l2315
  3343  0007C8                     l2293:
  3344                           
  3345                           ;display.c: 78: Set_Bits("ABC");
  3346  0007C8  0E42               	movlw	low STR_10
  3347  0007CA  6E1D               	movwf	Set_Bits@bits,c
  3348  0007CC  0E02               	movlw	high STR_10
  3349  0007CE  6E1E               	movwf	Set_Bits@bits+1,c
  3350  0007D0  501D               	movf	Set_Bits@bits,w,c
  3351  0007D2  101E               	iorwf	Set_Bits@bits+1,w,c
  3352  0007D4  A4D8               	btfss	status,2,c
  3353  0007D6  0E00               	movlw	low (__mediumconst shr (0+16))
  3354  0007D8  6E1F               	movwf	Set_Bits@bits+2,c
  3355  0007DA  EC28  F005         	call	_Set_Bits	;wreg free
  3356                           
  3357                           ;display.c: 79: break;
  3358  0007DE  D0B4               	goto	l2315
  3359  0007E0                     l2295:
  3360                           
  3361                           ;display.c: 81: Set_Bits("ABCDEFG");
  3362  0007E0  0E01               	movlw	low STR_11
  3363  0007E2  6E1D               	movwf	Set_Bits@bits,c
  3364  0007E4  0E02               	movlw	high STR_11
  3365  0007E6  6E1E               	movwf	Set_Bits@bits+1,c
  3366  0007E8  501D               	movf	Set_Bits@bits,w,c
  3367  0007EA  101E               	iorwf	Set_Bits@bits+1,w,c
  3368  0007EC  A4D8               	btfss	status,2,c
  3369  0007EE  0E00               	movlw	low (__mediumconst shr (0+16))
  3370  0007F0  6E1F               	movwf	Set_Bits@bits+2,c
  3371  0007F2  EC28  F005         	call	_Set_Bits	;wreg free
  3372                           
  3373                           ;display.c: 82: break;
  3374  0007F6  D0A8               	goto	l2315
  3375  0007F8                     l2297:
  3376                           
  3377                           ;display.c: 84: Set_Bits("ABCDFG");
  3378  0007F8  0E10               	movlw	low STR_12
  3379  0007FA  6E1D               	movwf	Set_Bits@bits,c
  3380  0007FC  0E02               	movlw	high STR_12
  3381  0007FE  6E1E               	movwf	Set_Bits@bits+1,c
  3382  000800  501D               	movf	Set_Bits@bits,w,c
  3383  000802  101E               	iorwf	Set_Bits@bits+1,w,c
  3384  000804  A4D8               	btfss	status,2,c
  3385  000806  0E00               	movlw	low (__mediumconst shr (0+16))
  3386  000808  6E1F               	movwf	Set_Bits@bits+2,c
  3387  00080A  EC28  F005         	call	_Set_Bits	;wreg free
  3388                           
  3389                           ;display.c: 85: break;
  3390  00080E  D09C               	goto	l2315
  3391  000810                     l2299:
  3392                           
  3393                           ;display.c: 87: Set_Bits("ADEFG");
  3394  000810  0E37               	movlw	low STR_13
  3395  000812  6E1D               	movwf	Set_Bits@bits,c
  3396  000814  0E02               	movlw	high STR_13
  3397  000816  6E1E               	movwf	Set_Bits@bits+1,c
  3398  000818  501D               	movf	Set_Bits@bits,w,c
  3399  00081A  101E               	iorwf	Set_Bits@bits+1,w,c
  3400  00081C  A4D8               	btfss	status,2,c
  3401  00081E  0E00               	movlw	low (__mediumconst shr (0+16))
  3402  000820  6E1F               	movwf	Set_Bits@bits+2,c
  3403  000822  EC28  F005         	call	_Set_Bits	;wreg free
  3404                           
  3405                           ;display.c: 88: break;
  3406  000826  D090               	goto	l2315
  3407  000828                     l2301:
  3408                           
  3409                           ;display.c: 90: Set_Bits("ABCEFG");
  3410  000828  0E17               	movlw	low STR_14
  3411  00082A  6E1D               	movwf	Set_Bits@bits,c
  3412  00082C  0E02               	movlw	high STR_14
  3413  00082E  6E1E               	movwf	Set_Bits@bits+1,c
  3414  000830  501D               	movf	Set_Bits@bits,w,c
  3415  000832  101E               	iorwf	Set_Bits@bits+1,w,c
  3416  000834  A4D8               	btfss	status,2,c
  3417  000836  0E00               	movlw	low (__mediumconst shr (0+16))
  3418  000838  6E1F               	movwf	Set_Bits@bits+2,c
  3419  00083A  EC28  F005         	call	_Set_Bits	;wreg free
  3420                           
  3421                           ;display.c: 91: break;
  3422  00083E  D084               	goto	l2315
  3423  000840                     l2303:
  3424                           
  3425                           ;display.c: 93: Set_Bits("ABCDEF");
  3426  000840  0E09               	movlw	low STR_3
  3427  000842  6E1D               	movwf	Set_Bits@bits,c
  3428  000844  0E02               	movlw	high STR_3
  3429  000846  6E1E               	movwf	Set_Bits@bits+1,c
  3430  000848  501D               	movf	Set_Bits@bits,w,c
  3431  00084A  101E               	iorwf	Set_Bits@bits+1,w,c
  3432  00084C  A4D8               	btfss	status,2,c
  3433  00084E  0E00               	movlw	low (__mediumconst shr (0+16))
  3434  000850  6E1F               	movwf	Set_Bits@bits+2,c
  3435  000852  EC28  F005         	call	_Set_Bits	;wreg free
  3436                           
  3437                           ;display.c: 94: break;
  3438  000856  D078               	goto	l2315
  3439  000858                     l2305:
  3440                           
  3441                           ;display.c: 96: Set_Bits("ABCDEF");
  3442  000858  0E09               	movlw	low STR_3
  3443  00085A  6E1D               	movwf	Set_Bits@bits,c
  3444  00085C  0E02               	movlw	high STR_3
  3445  00085E  6E1E               	movwf	Set_Bits@bits+1,c
  3446  000860  501D               	movf	Set_Bits@bits,w,c
  3447  000862  101E               	iorwf	Set_Bits@bits+1,w,c
  3448  000864  A4D8               	btfss	status,2,c
  3449  000866  0E00               	movlw	low (__mediumconst shr (0+16))
  3450  000868  6E1F               	movwf	Set_Bits@bits+2,c
  3451  00086A  EC28  F005         	call	_Set_Bits	;wreg free
  3452                           
  3453                           ;display.c: 97: break;
  3454  00086E  D06C               	goto	l2315
  3455  000870                     l2307:
  3456                           
  3457                           ;display.c: 99: Set_Bits("DEF");
  3458  000870  0E0C               	movlw	low (STR_3+3)
  3459  000872  6E1D               	movwf	Set_Bits@bits,c
  3460  000874  0E02               	movlw	high (STR_3+3)
  3461  000876  6E1E               	movwf	Set_Bits@bits+1,c
  3462  000878  501D               	movf	Set_Bits@bits,w,c
  3463  00087A  101E               	iorwf	Set_Bits@bits+1,w,c
  3464  00087C  A4D8               	btfss	status,2,c
  3465  00087E  0E00               	movlw	low (__mediumconst shr (0+16))
  3466  000880  6E1F               	movwf	Set_Bits@bits+2,c
  3467  000882  EC28  F005         	call	_Set_Bits	;wreg free
  3468                           
  3469                           ;display.c: 100: break;
  3470  000886  D060               	goto	l2315
  3471  000888                     l2309:
  3472                           
  3473                           ;display.c: 102: Set_Bits("G");
  3474  000888  0E29               	movlw	low (STR_6+4)
  3475  00088A  6E1D               	movwf	Set_Bits@bits,c
  3476  00088C  0E02               	movlw	high (STR_6+4)
  3477  00088E  6E1E               	movwf	Set_Bits@bits+1,c
  3478  000890  501D               	movf	Set_Bits@bits,w,c
  3479  000892  101E               	iorwf	Set_Bits@bits+1,w,c
  3480  000894  A4D8               	btfss	status,2,c
  3481  000896  0E00               	movlw	low (__mediumconst shr (0+16))
  3482  000898  6E1F               	movwf	Set_Bits@bits+2,c
  3483  00089A  EC28  F005         	call	_Set_Bits	;wreg free
  3484                           
  3485                           ;display.c: 103: break;
  3486  00089E  D054               	goto	l2315
  3487  0008A0                     l2311:
  3488                           
  3489                           ;display.c: 105: Set_Bits(0);
  3490  0008A0  0E00               	movlw	0
  3491  0008A2  6E1D               	movwf	Set_Bits@bits,c
  3492  0008A4  0E00               	movlw	0
  3493  0008A6  6E1E               	movwf	Set_Bits@bits+1,c
  3494  0008A8  0E00               	movlw	0
  3495  0008AA  6E1F               	movwf	Set_Bits@bits+2,c
  3496  0008AC  EC28  F005         	call	_Set_Bits	;wreg free
  3497                           
  3498                           ;display.c: 106: }
  3499  0008B0  D04B               	goto	l2315
  3500  0008B2                     l2313:
  3501  0008B2  5033               	movf	_display_counter,w,c
  3502  0008B4  0D01               	mullw	1
  3503  0008B6  C025  F027         	movff	Evaluate_Display@evaluate,??_Evaluate_Display
  3504  0008BA  C026  F028         	movff	Evaluate_Display@evaluate+1,??_Evaluate_Display+1
  3505  0008BE  50F3               	movf	prodl,w,c
  3506  0008C0  2627               	addwf	??_Evaluate_Display,f,c
  3507  0008C2  50F4               	movf	prodh,w,c
  3508  0008C4  2228               	addwfc	??_Evaluate_Display+1,f,c
  3509  0008C6  C027  FFF6         	movff	??_Evaluate_Display,tblptrl
  3510  0008CA  C028  FFF7         	movff	??_Evaluate_Display+1,tblptrh
  3511  0008CE  6AF8               	clrf	tblptru,c
  3512  0008D0  0E01               	movlw	(high __ramtop+-1)
  3513  0008D2  64F7               	cpfsgt	tblptrh,c
  3514  0008D4  D003               	bra	u1387
  3515  0008D6  0008               	tblrd		*
  3516  0008D8  50F5               	movf	tablat,w,c
  3517  0008DA  D005               	bra	u1380
  3518  0008DC                     u1387:
  3519  0008DC  CFF6 FFD9          	movff	tblptrl,fsr2l
  3520  0008E0  CFF7 FFDA          	movff	tblptrh,fsr2h
  3521  0008E4  50DF               	movf	indf2,w,c
  3522  0008E6                     u1380:
  3523                           
  3524                           ; Switch size 1, requested type "space"
  3525                           ; Number of cases is 16, Range of values is 45 to 79
  3526                           ; switch strategies available:
  3527                           ; Name         Instructions Cycles
  3528                           ; simple_byte           49    25 (average)
  3529                           ;	Chosen strategy is simple_byte
  3530  0008E6  0A2D               	xorlw	45	; case 45
  3531  0008E8  B4D8               	btfsc	status,2,c
  3532  0008EA  D7CE               	goto	l2309
  3533  0008EC  0A1D               	xorlw	29	; case 48
  3534  0008EE  B4D8               	btfsc	status,2,c
  3535  0008F0  D717               	goto	l2279
  3536  0008F2  0A01               	xorlw	1	; case 49
  3537  0008F4  B4D8               	btfsc	status,2,c
  3538  0008F6  D720               	goto	l2281
  3539  0008F8  0A03               	xorlw	3	; case 50
  3540  0008FA  B4D8               	btfsc	status,2,c
  3541  0008FC  D729               	goto	l2283
  3542  0008FE  0A01               	xorlw	1	; case 51
  3543  000900  B4D8               	btfsc	status,2,c
  3544  000902  D732               	goto	l2285
  3545  000904  0A07               	xorlw	7	; case 52
  3546  000906  B4D8               	btfsc	status,2,c
  3547  000908  D73B               	goto	l2287
  3548  00090A  0A01               	xorlw	1	; case 53
  3549  00090C  B4D8               	btfsc	status,2,c
  3550  00090E  D744               	goto	l2289
  3551  000910  0A03               	xorlw	3	; case 54
  3552  000912  B4D8               	btfsc	status,2,c
  3553  000914  D74D               	goto	l2291
  3554  000916  0A01               	xorlw	1	; case 55
  3555  000918  B4D8               	btfsc	status,2,c
  3556  00091A  D756               	goto	l2293
  3557  00091C  0A0F               	xorlw	15	; case 56
  3558  00091E  B4D8               	btfsc	status,2,c
  3559  000920  D75F               	goto	l2295
  3560  000922  0A01               	xorlw	1	; case 57
  3561  000924  B4D8               	btfsc	status,2,c
  3562  000926  D768               	goto	l2297
  3563  000928  0A78               	xorlw	120	; case 65
  3564  00092A  B4D8               	btfsc	status,2,c
  3565  00092C  D77D               	goto	l2301
  3566  00092E  0A05               	xorlw	5	; case 68
  3567  000930  B4D8               	btfsc	status,2,c
  3568  000932  D786               	goto	l2303
  3569  000934  0A01               	xorlw	1	; case 69
  3570  000936  B4D8               	btfsc	status,2,c
  3571  000938  D76B               	goto	l2299
  3572  00093A  0A09               	xorlw	9	; case 76
  3573  00093C  B4D8               	btfsc	status,2,c
  3574  00093E  D798               	goto	l2307
  3575  000940  0A03               	xorlw	3	; case 79
  3576  000942  B4D8               	btfsc	status,2,c
  3577  000944  D789               	goto	l2305
  3578  000946  D7AC               	goto	l2311
  3579  000948                     l2315:
  3580  000948  2A33               	incf	_display_counter,f,c
  3581  00094A                     l2317:
  3582  00094A  5029               	movf	Evaluate_Display@size,w,c
  3583  00094C  5C33               	subwf	_display_counter,w,c
  3584  00094E  B0D8               	btfsc	status,0,c
  3585  000950  0012               	return	
  3586  000952  D7AF               	goto	l2313
  3587  000954                     __end_of_Evaluate_Display:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           postdec1	equ	0xFE5
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           plusw2	equ	0xFDB
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _Set_Bits *****************
  3609 ;; Defined at:
  3610 ;;		line 12 in file "display.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  bits            3   28[COMRAM] PTR const unsigned char 
  3613 ;;		 -> ROM(8191), STR_18(2), STR_17(4), STR_16(7), 
  3614 ;;		 -> STR_15(7), STR_14(7), STR_13(6), STR_12(7), 
  3615 ;;		 -> STR_11(8), STR_10(4), STR_9(7), STR_8(6), 
  3616 ;;		 -> STR_7(5), STR_6(6), STR_5(6), STR_4(3), 
  3617 ;;		 -> STR_3(7), 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  bitcount        1   34[COMRAM] unsigned char 
  3620 ;;  Bitoutput       1   35[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;		None               void
  3623 ;; Registers used:
  3624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1
  3630 ;;      Params:         3       0       0
  3631 ;;      Locals:         2       0       0
  3632 ;;      Temps:          3       0       0
  3633 ;;      Totals:         8       0       0
  3634 ;;Total ram usage:        8 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    2
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_Evaluate_Display
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text19
  3645  000A50                     __ptext19:
  3646                           	opt stack 0
  3647  000A50                     _Set_Bits:
  3648                           	opt stack 25
  3649                           
  3650                           ;display.c: 13: unsigned char Bitoutput = 0;
  3651                           
  3652                           ;incstack = 0
  3653  000A50  0E00               	movlw	0
  3654  000A52  6E24               	movwf	Set_Bits@Bitoutput,c
  3655                           
  3656                           ;display.c: 14: for(unsigned char bitcount = 0; bits[bitcount] != '\0';
  3657  000A54  0E00               	movlw	0
  3658  000A56  6E23               	movwf	Set_Bits@bitcount,c
  3659                           
  3660                           ;display.c: 15: bitcount++) {
  3661  000A58  D037               	goto	l2273
  3662  000A5A                     l2253:
  3663                           
  3664                           ;display.c: 18: Bitoutput |= 0b00000001;
  3665  000A5A  8024               	bsf	Set_Bits@Bitoutput,0,c
  3666                           
  3667                           ;display.c: 19: break;
  3668  000A5C  D034               	goto	l2271
  3669  000A5E                     l2255:
  3670                           
  3671                           ;display.c: 21: Bitoutput |= 0b00000010;
  3672  000A5E  8224               	bsf	Set_Bits@Bitoutput,1,c
  3673                           
  3674                           ;display.c: 22: break;
  3675  000A60  D032               	goto	l2271
  3676  000A62                     l2257:
  3677                           
  3678                           ;display.c: 24: Bitoutput |= 0b00000100;
  3679  000A62  8424               	bsf	Set_Bits@Bitoutput,2,c
  3680                           
  3681                           ;display.c: 25: break;
  3682  000A64  D030               	goto	l2271
  3683  000A66                     l2259:
  3684                           
  3685                           ;display.c: 27: Bitoutput |= 0b00001000;
  3686  000A66  8624               	bsf	Set_Bits@Bitoutput,3,c
  3687                           
  3688                           ;display.c: 28: break;
  3689  000A68  D02E               	goto	l2271
  3690  000A6A                     l2261:
  3691                           
  3692                           ;display.c: 30: Bitoutput |= 0b00010000;
  3693  000A6A  8824               	bsf	Set_Bits@Bitoutput,4,c
  3694                           
  3695                           ;display.c: 31: break;
  3696  000A6C  D02C               	goto	l2271
  3697  000A6E                     l2263:
  3698                           
  3699                           ;display.c: 33: Bitoutput |= 0b00100000;
  3700  000A6E  8A24               	bsf	Set_Bits@Bitoutput,5,c
  3701                           
  3702                           ;display.c: 34: break;
  3703  000A70  D02A               	goto	l2271
  3704  000A72                     l2265:
  3705                           
  3706                           ;display.c: 36: Bitoutput |= 0b01000000;
  3707  000A72  8C24               	bsf	Set_Bits@Bitoutput,6,c
  3708                           
  3709                           ;display.c: 40: }
  3710                           
  3711                           ;display.c: 39: break;
  3712                           
  3713                           ;display.c: 38: default:
  3714                           
  3715                           ;display.c: 37: break;
  3716  000A74  D028               	goto	l2271
  3717  000A76                     l2269:
  3718  000A76  5023               	movf	Set_Bits@bitcount,w,c
  3719  000A78  0D01               	mullw	1
  3720  000A7A  50F3               	movf	prodl,w,c
  3721  000A7C  241D               	addwf	Set_Bits@bits,w,c
  3722  000A7E  6E20               	movwf	??_Set_Bits& (0+255),c
  3723  000A80  50F4               	movf	prodh,w,c
  3724  000A82  201E               	addwfc	Set_Bits@bits+1,w,c
  3725  000A84  6E21               	movwf	(??_Set_Bits+1)& (0+255),c
  3726  000A86  0E00               	movlw	0
  3727  000A88  201F               	addwfc	Set_Bits@bits+2,w,c
  3728  000A8A  6E22               	movwf	(??_Set_Bits+2)& (0+255),c
  3729  000A8C  C020  FFF6         	movff	??_Set_Bits,tblptrl
  3730  000A90  C021  FFF7         	movff	??_Set_Bits+1,tblptrh
  3731  000A94  C022  FFF8         	movff	??_Set_Bits+2,tblptru
  3732  000A98  0008               	tblrd		*
  3733  000A9A  50F5               	movf	tablat,w,c
  3734                           
  3735                           ; Switch size 1, requested type "space"
  3736                           ; Number of cases is 7, Range of values is 65 to 71
  3737                           ; switch strategies available:
  3738                           ; Name         Instructions Cycles
  3739                           ; simple_byte           22    12 (average)
  3740                           ;	Chosen strategy is simple_byte
  3741  000A9C  0A41               	xorlw	65	; case 65
  3742  000A9E  B4D8               	btfsc	status,2,c
  3743  000AA0  D7DC               	goto	l2253
  3744  000AA2  0A03               	xorlw	3	; case 66
  3745  000AA4  B4D8               	btfsc	status,2,c
  3746  000AA6  D7DB               	goto	l2255
  3747  000AA8  0A01               	xorlw	1	; case 67
  3748  000AAA  B4D8               	btfsc	status,2,c
  3749  000AAC  D7DA               	goto	l2257
  3750  000AAE  0A07               	xorlw	7	; case 68
  3751  000AB0  B4D8               	btfsc	status,2,c
  3752  000AB2  D7D9               	goto	l2259
  3753  000AB4  0A01               	xorlw	1	; case 69
  3754  000AB6  B4D8               	btfsc	status,2,c
  3755  000AB8  D7D8               	goto	l2261
  3756  000ABA  0A03               	xorlw	3	; case 70
  3757  000ABC  B4D8               	btfsc	status,2,c
  3758  000ABE  D7D7               	goto	l2263
  3759  000AC0  0A01               	xorlw	1	; case 71
  3760  000AC2  B4D8               	btfsc	status,2,c
  3761  000AC4  D7D6               	goto	l2265
  3762  000AC6                     l2271:
  3763  000AC6  2A23               	incf	Set_Bits@bitcount,f,c
  3764  000AC8                     l2273:
  3765  000AC8  5023               	movf	Set_Bits@bitcount,w,c
  3766  000ACA  0D01               	mullw	1
  3767  000ACC  50F3               	movf	prodl,w,c
  3768  000ACE  241D               	addwf	Set_Bits@bits,w,c
  3769  000AD0  6E20               	movwf	??_Set_Bits& (0+255),c
  3770  000AD2  50F4               	movf	prodh,w,c
  3771  000AD4  201E               	addwfc	Set_Bits@bits+1,w,c
  3772  000AD6  6E21               	movwf	(??_Set_Bits+1)& (0+255),c
  3773  000AD8  0E00               	movlw	0
  3774  000ADA  201F               	addwfc	Set_Bits@bits+2,w,c
  3775  000ADC  6E22               	movwf	(??_Set_Bits+2)& (0+255),c
  3776  000ADE  C020  FFF6         	movff	??_Set_Bits,tblptrl
  3777  000AE2  C021  FFF7         	movff	??_Set_Bits+1,tblptrh
  3778  000AE6  C022  FFF8         	movff	??_Set_Bits+2,tblptru
  3779  000AEA  0008               	tblrd		*
  3780  000AEC  50F5               	movf	tablat,w,c
  3781  000AEE  0900               	iorlw	0
  3782  000AF0  A4D8               	btfss	status,2,c
  3783  000AF2  D7C1               	goto	l2269
  3784                           
  3785                           ;display.c: 41: }
  3786                           ;display.c: 42: pixels[display_counter] = Bitoutput;
  3787  000AF4  5033               	movf	_display_counter,w,c
  3788  000AF6  0D01               	mullw	1
  3789  000AF8  0E38               	movlw	low _pixels
  3790  000AFA  24F3               	addwf	prodl,w,c
  3791  000AFC  6ED9               	movwf	fsr2l,c
  3792  000AFE  0E00               	movlw	high _pixels
  3793  000B00  20F4               	addwfc	prodh,w,c
  3794  000B02  6EDA               	movwf	fsr2h,c
  3795  000B04  C024  FFDF         	movff	Set_Bits@Bitoutput,indf2
  3796  000B08  0012               	return		;funcret
  3797  000B0A                     __end_of_Set_Bits:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postdec1	equ	0xFE5
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           plusw2	equ	0xFDB
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _Read_Data *****************
  3819 ;; Defined at:
  3820 ;;		line 44 in file "storage.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  read_address    1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  read_address    1   32[COMRAM] unsigned char 
  3825 ;;  data_read       2   30[COMRAM] unsigned int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2   28[COMRAM] unsigned int 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1
  3835 ;;      Params:         2       0       0
  3836 ;;      Locals:         3       0       0
  3837 ;;      Temps:          0       0       0
  3838 ;;      Totals:         5       0       0
  3839 ;;Total ram usage:        5 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    2
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_Check_Buttons
  3846 ;;		_Load_Data
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text20
  3851  000E1A                     __ptext20:
  3852                           	opt stack 0
  3853  000E1A                     _Read_Data:
  3854                           	opt stack 27
  3855                           
  3856                           ;incstack = 0
  3857                           ;Read_Data@read_address stored from wreg
  3858  000E1A  6E21               	movwf	Read_Data@read_address,c
  3859                           
  3860                           ;storage.c: 45: unsigned int data_read = 0;
  3861  000E1C  0E00               	movlw	0
  3862  000E1E  6E20               	movwf	Read_Data@data_read+1,c
  3863  000E20  0E00               	movlw	0
  3864  000E22  6E1F               	movwf	Read_Data@data_read,c
  3865                           
  3866                           ;storage.c: 46: read_address += 50;
  3867  000E24  0E32               	movlw	50
  3868  000E26  2621               	addwf	Read_Data@read_address,f,c
  3869                           
  3870                           ;storage.c: 47: EEADR = read_address;
  3871  000E28  C021  FFA9         	movff	Read_Data@read_address,4009	;volatile
  3872                           
  3873                           ;storage.c: 48: EECON1bits.EEPGD = 0;
  3874  000E2C  9EA6               	bcf	4006,7,c	;volatile
  3875                           
  3876                           ;storage.c: 49: EECON1bits.CFGS = 0;
  3877  000E2E  9CA6               	bcf	4006,6,c	;volatile
  3878                           
  3879                           ;storage.c: 50: EECON1bits.RD = 1;
  3880  000E30  80A6               	bsf	4006,0,c	;volatile
  3881                           
  3882                           ;storage.c: 51: data_read = EEDATA;
  3883  000E32  CFA8 F01F          	movff	4008,Read_Data@data_read	;volatile
  3884  000E36  6A20               	clrf	Read_Data@data_read+1,c
  3885                           
  3886                           ;storage.c: 52: read_address -= 50;
  3887  000E38  0E32               	movlw	50
  3888  000E3A  5E21               	subwf	Read_Data@read_address,f,c
  3889                           
  3890                           ;storage.c: 53: data_read <<= 8;
  3891  000E3C  501F               	movf	Read_Data@data_read,w,c
  3892  000E3E  6E20               	movwf	Read_Data@data_read+1,c
  3893  000E40  6A1F               	clrf	Read_Data@data_read,c
  3894                           
  3895                           ;storage.c: 54: EEADR = read_address;
  3896  000E42  C021  FFA9         	movff	Read_Data@read_address,4009	;volatile
  3897                           
  3898                           ;storage.c: 55: EECON1bits.EEPGD = 0;
  3899  000E46  9EA6               	bcf	4006,7,c	;volatile
  3900                           
  3901                           ;storage.c: 56: EECON1bits.CFGS = 0;
  3902  000E48  9CA6               	bcf	4006,6,c	;volatile
  3903                           
  3904                           ;storage.c: 57: EECON1bits.RD = 1;
  3905  000E4A  80A6               	bsf	4006,0,c	;volatile
  3906                           
  3907                           ;storage.c: 58: data_read |= EEDATA;
  3908  000E4C  50A8               	movf	4008,w,c	;volatile
  3909  000E4E  121F               	iorwf	Read_Data@data_read,f,c
  3910                           
  3911                           ;storage.c: 59: return data_read;
  3912  000E50  C01F  F01D         	movff	Read_Data@data_read,?_Read_Data
  3913  000E54  C020  F01E         	movff	Read_Data@data_read+1,?_Read_Data+1
  3914  000E58  0012               	return	
  3915  000E5A                     __end_of_Read_Data:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           postdec1	equ	0xFE5
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _Delay_Routine *****************
  3937 ;; Defined at:
  3938 ;;		line 78 in file "main.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  delay_multip    1    wreg     unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  delay_multip    1   29[COMRAM] unsigned char 
  3943 ;;  delay_counte    1   30[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;		None               void
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1
  3953 ;;      Params:         0       0       0
  3954 ;;      Locals:         2       0       0
  3955 ;;      Temps:          1       0       0
  3956 ;;      Totals:         3       0       0
  3957 ;;Total ram usage:        3 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    2
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_Check_Buttons
  3964 ;;		_Load_Data
  3965 ;;		_Del_Data
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text21
  3970  000F0E                     __ptext21:
  3971                           	opt stack 0
  3972  000F0E                     _Delay_Routine:
  3973                           	opt stack 27
  3974                           
  3975                           ;incstack = 0
  3976                           ;Delay_Routine@delay_multiplyer stored from wreg
  3977  000F0E  6E1E               	movwf	Delay_Routine@delay_multiplyer,c
  3978                           
  3979                           ;main.c: 79: for (unsigned char delay_counter = 0; delay_counter < delay_multiplyer;
  3980  000F10  0E00               	movlw	0
  3981  000F12  6E1F               	movwf	Delay_Routine@delay_counter,c
  3982                           
  3983                           ;main.c: 80: delay_counter++) {
  3984  000F14  D008               	goto	l2371
  3985  000F16                     l2367:
  3986                           
  3987                           ;main.c: 81: _delay((unsigned long)((100)*(4000000/4000.0)));
  3988  000F16  0E82               	movlw	130
  3989  000F18  6E1D               	movwf	??_Delay_Routine& (0+255),c
  3990  000F1A  0EDE               	movlw	222
  3991  000F1C                     u1857:
  3992  000F1C  2EE8               	decfsz	wreg,f,c
  3993  000F1E  D7FE               	goto	u1857
  3994  000F20  2E1D               	decfsz	??_Delay_Routine& (0+255),f,c
  3995  000F22  D7FC               	goto	u1857
  3996  000F24  2A1F               	incf	Delay_Routine@delay_counter,f,c
  3997  000F26                     l2371:
  3998  000F26  501E               	movf	Delay_Routine@delay_multiplyer,w,c
  3999  000F28  5C1F               	subwf	Delay_Routine@delay_counter,w,c
  4000  000F2A  A0D8               	btfss	status,0,c
  4001  000F2C  D7F4               	goto	l2367
  4002                           
  4003                           ;main.c: 82: }
  4004                           ;main.c: 83: __nop();
  4005  000F2E  F000               	nop	
  4006  000F30  0012               	return		;funcret
  4007  000F32                     __end_of_Delay_Routine:
  4008                           	opt stack 0
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           postdec1	equ	0xFE5
  4019                           fsr1l	equ	0xFE1
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           plusw2	equ	0xFDB
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _Isr *****************
  4029 ;; Defined at:
  4030 ;;		line 4 in file "interrupt.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  search_index    1   27[COMRAM] unsigned char 
  4035 ;;  pixel_index_    1   26[COMRAM] unsigned char 
  4036 ;;  pixel_index_    1   25[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;		None               void
  4039 ;; Registers used:
  4040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1
  4046 ;;      Params:         0       0       0
  4047 ;;      Locals:         3       0       0
  4048 ;;      Temps:         17       0       0
  4049 ;;      Totals:        20       0       0
  4050 ;;Total ram usage:       20 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    1
  4053 ;; This function calls:
  4054 ;;		_Receive
  4055 ;;		___awdiv
  4056 ;; This function is called by:
  4057 ;;		Interrupt level 2
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	intcode
  4062  000008                     __pintcode:
  4063                           	opt stack 0
  4064  000008                     _Isr:
  4065                           	opt stack 22
  4066                           
  4067                           ;incstack = 0
  4068  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4069  00000A  CFFA F00C          	movff	pclath,??_Isr+3
  4070  00000E  CFFB F00D          	movff	pclatu,??_Isr+4
  4071  000012  CFE9 F00E          	movff	fsr0l,??_Isr+5
  4072  000016  CFEA F00F          	movff	fsr0h,??_Isr+6
  4073  00001A  CFE1 F010          	movff	fsr1l,??_Isr+7
  4074  00001E  CFE2 F011          	movff	fsr1h,??_Isr+8
  4075  000022  CFD9 F012          	movff	fsr2l,??_Isr+9
  4076  000026  CFDA F013          	movff	fsr2h,??_Isr+10
  4077  00002A  CFF3 F014          	movff	prodl,??_Isr+11
  4078  00002E  CFF4 F015          	movff	prodh,??_Isr+12
  4079  000032  CFF6 F016          	movff	tblptrl,??_Isr+13
  4080  000036  CFF7 F017          	movff	tblptrh,??_Isr+14
  4081  00003A  CFF8 F018          	movff	tblptru,??_Isr+15
  4082  00003E  CFF5 F019          	movff	tablat,??_Isr+16
  4083                           
  4084                           ;interrupt.c: 5: if(PIR1bits.RCIF == 1) {
  4085  000042  AA9E               	btfss	3998,5,c	;volatile
  4086  000044  D096               	goto	i2l2245
  4087                           
  4088                           ;interrupt.c: 6: PIR1bits.RCIF = 0;
  4089  000046  9A9E               	bcf	3998,5,c	;volatile
  4090                           
  4091                           ;interrupt.c: 7: if(RCSTAbits.RX9D == 1) {
  4092  000048  A0AB               	btfss	4011,0,c	;volatile
  4093  00004A  D015               	goto	i2l520
  4094                           
  4095                           ;interrupt.c: 8: receive_counter = 0;
  4096  00004C  0E00               	movlw	0
  4097  00004E  6E36               	movwf	_receive_counter,c
  4098                           
  4099                           ;interrupt.c: 9: received[receive_counter] = Receive();
  4100  000050  5036               	movf	_receive_counter,w,c
  4101  000052  0D01               	mullw	1
  4102  000054  0E2C               	movlw	low _received
  4103  000056  24F3               	addwf	prodl,w,c
  4104  000058  6ED9               	movwf	fsr2l,c
  4105  00005A  0E00               	movlw	high _received
  4106  00005C  20F4               	addwfc	prodh,w,c
  4107  00005E  6EDA               	movwf	fsr2h,c
  4108  000060  ECC4  F007         	call	_Receive	;wreg free
  4109  000064  6EDF               	movwf	indf2,c
  4110                           
  4111                           ;interrupt.c: 10: receive_counter++;
  4112  000066  2A36               	incf	_receive_counter,f,c
  4113                           
  4114                           ;interrupt.c: 11: if(received[0] == 0xFF) {
  4115  000068  282C               	incf	_received,w,c
  4116  00006A  A4D8               	btfss	status,2,c
  4117  00006C  D002               	goto	i2l521
  4118                           
  4119                           ;interrupt.c: 12: master_addressed = 1;
  4120  00006E  8242               	bsf	_master_addressed/(0+8),_master_addressed& (0+7),c
  4121                           
  4122                           ;interrupt.c: 13: } else {
  4123  000070  D07F               	goto	i2l2243
  4124  000072                     i2l521:
  4125                           
  4126                           ;interrupt.c: 14: master_addressed = 0;
  4127  000072  9242               	bcf	_master_addressed/(0+8),_master_addressed& (0+7),c
  4128                           
  4129                           ;interrupt.c: 15: }
  4130                           ;interrupt.c: 16: } else if(master_addressed == 1) {
  4131  000074  D07D               	goto	i2l2243
  4132  000076                     i2l520:
  4133  000076  A242               	btfss	_master_addressed/(0+8),_master_addressed& (0+7),c
  4134  000078  D07B               	goto	i2l2243
  4135                           
  4136                           ;interrupt.c: 17: received[receive_counter] = Receive();
  4137  00007A  5036               	movf	_receive_counter,w,c
  4138  00007C  0D01               	mullw	1
  4139  00007E  0E2C               	movlw	low _received
  4140  000080  24F3               	addwf	prodl,w,c
  4141  000082  6ED9               	movwf	fsr2l,c
  4142  000084  0E00               	movlw	high _received
  4143  000086  20F4               	addwfc	prodh,w,c
  4144  000088  6EDA               	movwf	fsr2h,c
  4145  00008A  ECC4  F007         	call	_Receive	;wreg free
  4146  00008E  6EDF               	movwf	indf2,c
  4147                           
  4148                           ;interrupt.c: 18: receive_counter++;
  4149  000090  2A36               	incf	_receive_counter,f,c
  4150                           
  4151                           ;interrupt.c: 19: if(receive_counter > 4) {
  4152  000092  0E04               	movlw	4
  4153  000094  6436               	cpfsgt	_receive_counter,c
  4154  000096  D06C               	goto	i2l2243
  4155                           
  4156                           ;interrupt.c: 20: receive_counter = 0;
  4157  000098  0E00               	movlw	0
  4158  00009A  6E36               	movwf	_receive_counter,c
  4159                           
  4160                           ;interrupt.c: 21: master_addressed = 0;
  4161  00009C  9242               	bcf	_master_addressed/(0+8),_master_addressed& (0+7),c
  4162                           
  4163                           ;interrupt.c: 22: if(received[2] == 'T') {
  4164  00009E  0E54               	movlw	84
  4165  0000A0  182E               	xorwf	_received+2,w,c
  4166  0000A2  A4D8               	btfss	status,2,c
  4167  0000A4  D065               	goto	i2l2243
  4168                           
  4169                           ;interrupt.c: 23: unsigned char search_index = 0xFF;
  4170  0000A6  681C               	setf	Isr@search_index,c
  4171                           
  4172                           ;interrupt.c: 24: unsigned char pixel_index_array = 0;
  4173  0000A8  0E00               	movlw	0
  4174  0000AA  6E1A               	movwf	Isr@pixel_index_array,c
  4175                           
  4176                           ;interrupt.c: 25: unsigned char pixel_index_bit = 0;
  4177  0000AC  0E00               	movlw	0
  4178  0000AE  6E1B               	movwf	Isr@pixel_index_bit,c
  4179                           
  4180                           ;interrupt.c: 26: search_index = (received[1] * 10);
  4181  0000B0  502D               	movf	_received+1,w,c
  4182  0000B2  0D0A               	mullw	10
  4183  0000B4  CFF3 F01C          	movff	prodl,Isr@search_index
  4184                           
  4185                           ;interrupt.c: 27: search_index += received[3];
  4186  0000B8  502F               	movf	_received+3,w,c
  4187  0000BA  261C               	addwf	Isr@search_index,f,c
  4188                           
  4189                           ;interrupt.c: 28: pixel_index_array =
  4190                           ;interrupt.c: 29: pin[search_index].led_address / 8;
  4191  0000BC  501C               	movf	Isr@search_index,w,c
  4192  0000BE  0D06               	mullw	6
  4193  0000C0  0E03               	movlw	3
  4194  0000C2  26F3               	addwf	prodl,f,c
  4195  0000C4  0E00               	movlw	0
  4196  0000C6  22F4               	addwfc	prodh,f,c
  4197  0000C8  0E00               	movlw	low _pin
  4198  0000CA  24F3               	addwf	prodl,w,c
  4199  0000CC  6ED9               	movwf	fsr2l,c
  4200  0000CE  0E01               	movlw	high _pin
  4201  0000D0  20F4               	addwfc	prodh,w,c
  4202  0000D2  6EDA               	movwf	fsr2h,c
  4203  0000D4  50DF               	movf	indf2,w,c
  4204  0000D6  6E09               	movwf	??_Isr& (0+255),c
  4205  0000D8  5009               	movf	??_Isr,w,c
  4206  0000DA  6E01               	movwf	___awdiv@dividend,c
  4207  0000DC  6A02               	clrf	___awdiv@dividend+1,c
  4208  0000DE  0E00               	movlw	0
  4209  0000E0  6E04               	movwf	___awdiv@divisor+1,c
  4210  0000E2  0E08               	movlw	8
  4211  0000E4  6E03               	movwf	___awdiv@divisor,c
  4212  0000E6  ECDF  F005         	call	___awdiv	;wreg free
  4213  0000EA  5001               	movf	?___awdiv,w,c
  4214  0000EC  6E1A               	movwf	Isr@pixel_index_array,c
  4215                           
  4216                           ;interrupt.c: 30: pixel_index_bit =
  4217                           ;interrupt.c: 31: pin[search_index].led_address % 8;
  4218  0000EE  501C               	movf	Isr@search_index,w,c
  4219  0000F0  0D06               	mullw	6
  4220  0000F2  0E03               	movlw	3
  4221  0000F4  26F3               	addwf	prodl,f,c
  4222  0000F6  0E00               	movlw	0
  4223  0000F8  22F4               	addwfc	prodh,f,c
  4224  0000FA  0E00               	movlw	low _pin
  4225  0000FC  24F3               	addwf	prodl,w,c
  4226  0000FE  6ED9               	movwf	fsr2l,c
  4227  000100  0E01               	movlw	high _pin
  4228  000102  20F4               	addwfc	prodh,w,c
  4229  000104  6EDA               	movwf	fsr2h,c
  4230  000106  50DF               	movf	indf2,w,c
  4231  000108  0B07               	andlw	7
  4232  00010A  6E1B               	movwf	Isr@pixel_index_bit,c
  4233                           
  4234                           ;interrupt.c: 32: if(received[4] == 1){
  4235  00010C  0430               	decf	_received+4,w,c
  4236  00010E  A4D8               	btfss	status,2,c
  4237  000110  D015               	goto	i2l2239
  4238                           
  4239                           ;interrupt.c: 33: pixels[pixel_index_array] |=
  4240                           ;interrupt.c: 34: (1 << pixel_index_bit);
  4241  000112  C01B  F009         	movff	Isr@pixel_index_bit,??_Isr
  4242  000116  0E01               	movlw	1
  4243  000118  6E0A               	movwf	(??_Isr+1)& (0+255),c
  4244  00011A  2A09               	incf	??_Isr,f,c
  4245  00011C  D002               	goto	i2u133_44
  4246  00011E                     i2u133_45:
  4247  00011E  90D8               	bcf	status,0,c
  4248  000120  360A               	rlcf	??_Isr+1,f,c
  4249  000122                     i2u133_44:
  4250  000122  2E09               	decfsz	??_Isr,f,c
  4251  000124  D7FC               	goto	i2u133_45
  4252  000126  501A               	movf	Isr@pixel_index_array,w,c
  4253  000128  0D01               	mullw	1
  4254  00012A  0E38               	movlw	low _pixels
  4255  00012C  24F3               	addwf	prodl,w,c
  4256  00012E  6ED9               	movwf	fsr2l,c
  4257  000130  0E00               	movlw	high _pixels
  4258  000132  20F4               	addwfc	prodh,w,c
  4259  000134  6EDA               	movwf	fsr2h,c
  4260  000136  500A               	movf	??_Isr+1,w,c
  4261  000138  12DF               	iorwf	indf2,f,c
  4262                           
  4263                           ;interrupt.c: 35: }else if(received[4] == 0) {
  4264  00013A  D01A               	goto	i2l2243
  4265  00013C                     i2l2239:
  4266  00013C  5030               	movf	_received+4,w,c
  4267  00013E  A4D8               	btfss	status,2,c
  4268  000140  D017               	goto	i2l2243
  4269                           
  4270                           ;interrupt.c: 36: pixels[pixel_index_array] &=
  4271                           ;interrupt.c: 37: ~(1 << pixel_index_bit);
  4272  000142  C01B  F009         	movff	Isr@pixel_index_bit,??_Isr
  4273  000146  0E01               	movlw	1
  4274  000148  6E0A               	movwf	(??_Isr+1)& (0+255),c
  4275  00014A  2A09               	incf	??_Isr,f,c
  4276  00014C  D002               	goto	i2u135_44
  4277  00014E                     i2u135_45:
  4278  00014E  90D8               	bcf	status,0,c
  4279  000150  360A               	rlcf	??_Isr+1,f,c
  4280  000152                     i2u135_44:
  4281  000152  2E09               	decfsz	??_Isr,f,c
  4282  000154  D7FC               	goto	i2u135_45
  4283  000156  500A               	movf	??_Isr+1,w,c
  4284  000158  0AFF               	xorlw	255
  4285  00015A  6E0B               	movwf	(??_Isr+2)& (0+255),c
  4286  00015C  501A               	movf	Isr@pixel_index_array,w,c
  4287  00015E  0D01               	mullw	1
  4288  000160  0E38               	movlw	low _pixels
  4289  000162  24F3               	addwf	prodl,w,c
  4290  000164  6ED9               	movwf	fsr2l,c
  4291  000166  0E00               	movlw	high _pixels
  4292  000168  20F4               	addwfc	prodh,w,c
  4293  00016A  6EDA               	movwf	fsr2h,c
  4294  00016C  500B               	movf	??_Isr+2,w,c
  4295  00016E  16DF               	andwf	indf2,f,c
  4296  000170                     i2l2243:
  4297                           
  4298                           ;interrupt.c: 38: }
  4299                           ;interrupt.c: 39: }
  4300                           ;interrupt.c: 40: }
  4301                           ;interrupt.c: 41: }
  4302                           ;interrupt.c: 42: __nop();
  4303  000170  F000               	nop	
  4304  000172                     i2l2245:
  4305                           
  4306                           ;interrupt.c: 48: }if(PIR1bits.CCP1IF == 1) {
  4307  000172  A49E               	btfss	3998,2,c	;volatile
  4308  000174  D003               	goto	i2l531
  4309                           
  4310                           ;interrupt.c: 49: PIR1bits.CCP1IF = 0;
  4311  000176  949E               	bcf	3998,2,c	;volatile
  4312                           
  4313                           ;interrupt.c: 50: current_time++;
  4314  000178  4A31               	infsnz	_current_time,f,c
  4315  00017A  2A32               	incf	_current_time+1,f,c
  4316  00017C                     i2l531:
  4317  00017C  C019  FFF5         	movff	??_Isr+16,tablat
  4318  000180  C018  FFF8         	movff	??_Isr+15,tblptru
  4319  000184  C017  FFF7         	movff	??_Isr+14,tblptrh
  4320  000188  C016  FFF6         	movff	??_Isr+13,tblptrl
  4321  00018C  C015  FFF4         	movff	??_Isr+12,prodh
  4322  000190  C014  FFF3         	movff	??_Isr+11,prodl
  4323  000194  C013  FFDA         	movff	??_Isr+10,fsr2h
  4324  000198  C012  FFD9         	movff	??_Isr+9,fsr2l
  4325  00019C  C011  FFE2         	movff	??_Isr+8,fsr1h
  4326  0001A0  C010  FFE1         	movff	??_Isr+7,fsr1l
  4327  0001A4  C00F  FFEA         	movff	??_Isr+6,fsr0h
  4328  0001A8  C00E  FFE9         	movff	??_Isr+5,fsr0l
  4329  0001AC  C00D  FFFB         	movff	??_Isr+4,pclatu
  4330  0001B0  C00C  FFFA         	movff	??_Isr+3,pclath
  4331  0001B4  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4332  0001B6  0011               	retfie		f
  4333  0001B8                     __end_of_Isr:
  4334                           	opt stack 0
  4335                           pclatu	equ	0xFFB
  4336                           pclath	equ	0xFFA
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           prodh	equ	0xFF4
  4342                           prodl	equ	0xFF3
  4343                           intcon	equ	0xFF2
  4344                           postinc0	equ	0xFEE
  4345                           fsr0h	equ	0xFEA
  4346                           fsr0l	equ	0xFE9
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1h	equ	0xFE2
  4350                           fsr1l	equ	0xFE1
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           postdec2	equ	0xFDD
  4354                           plusw2	equ	0xFDB
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function ___awdiv *****************
  4360 ;; Defined at:
  4361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  dividend        2    0[COMRAM] int 
  4364 ;;  divisor         2    2[COMRAM] int 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  quotient        2    6[COMRAM] int 
  4367 ;;  sign            1    5[COMRAM] unsigned char 
  4368 ;;  counter         1    4[COMRAM] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  2    0[COMRAM] int 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1
  4378 ;;      Params:         4       0       0
  4379 ;;      Locals:         4       0       0
  4380 ;;      Temps:          0       0       0
  4381 ;;      Totals:         8       0       0
  4382 ;;Total ram usage:        8 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; This function calls:
  4385 ;;		Nothing
  4386 ;; This function is called by:
  4387 ;;		_Isr
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text23
  4392  000BBE                     __ptext23:
  4393                           	opt stack 0
  4394  000BBE                     ___awdiv:
  4395                           	opt stack 22
  4396                           
  4397                           ;incstack = 0
  4398  000BBE  0E00               	movlw	0
  4399  000BC0  6E06               	movwf	___awdiv@sign,c
  4400  000BC2  AE04               	btfss	___awdiv@divisor+1,7,c
  4401  000BC4  D006               	goto	i2l2149
  4402  000BC6  6C03               	negf	___awdiv@divisor,c
  4403  000BC8  1E04               	comf	___awdiv@divisor+1,f,c
  4404  000BCA  B0D8               	btfsc	status,0,c
  4405  000BCC  2A04               	incf	___awdiv@divisor+1,f,c
  4406  000BCE  0E01               	movlw	1
  4407  000BD0  6E06               	movwf	___awdiv@sign,c
  4408  000BD2                     i2l2149:
  4409  000BD2  AE02               	btfss	___awdiv@dividend+1,7,c
  4410  000BD4  D006               	goto	i2l2155
  4411  000BD6  6C01               	negf	___awdiv@dividend,c
  4412  000BD8  1E02               	comf	___awdiv@dividend+1,f,c
  4413  000BDA  B0D8               	btfsc	status,0,c
  4414  000BDC  2A02               	incf	___awdiv@dividend+1,f,c
  4415  000BDE  0E01               	movlw	1
  4416  000BE0  1A06               	xorwf	___awdiv@sign,f,c
  4417  000BE2                     i2l2155:
  4418  000BE2  0E00               	movlw	0
  4419  000BE4  6E08               	movwf	___awdiv@quotient+1,c
  4420  000BE6  0E00               	movlw	0
  4421  000BE8  6E07               	movwf	___awdiv@quotient,c
  4422  000BEA  5003               	movf	___awdiv@divisor,w,c
  4423  000BEC  1004               	iorwf	___awdiv@divisor+1,w,c
  4424  000BEE  B4D8               	btfsc	status,2,c
  4425  000BF0  D01C               	goto	i2l2177
  4426  000BF2  0E01               	movlw	1
  4427  000BF4  6E05               	movwf	___awdiv@counter,c
  4428  000BF6  D004               	goto	i2l2163
  4429  000BF8                     i2l2161:
  4430  000BF8  90D8               	bcf	status,0,c
  4431  000BFA  3603               	rlcf	___awdiv@divisor,f,c
  4432  000BFC  3604               	rlcf	___awdiv@divisor+1,f,c
  4433  000BFE  2A05               	incf	___awdiv@counter,f,c
  4434  000C00                     i2l2163:
  4435  000C00  AE04               	btfss	___awdiv@divisor+1,7,c
  4436  000C02  D7FA               	goto	i2l2161
  4437  000C04                     i2l2165:
  4438  000C04  90D8               	bcf	status,0,c
  4439  000C06  3607               	rlcf	___awdiv@quotient,f,c
  4440  000C08  3608               	rlcf	___awdiv@quotient+1,f,c
  4441  000C0A  5003               	movf	___awdiv@divisor,w,c
  4442  000C0C  5C01               	subwf	___awdiv@dividend,w,c
  4443  000C0E  5004               	movf	___awdiv@divisor+1,w,c
  4444  000C10  5802               	subwfb	___awdiv@dividend+1,w,c
  4445  000C12  A0D8               	btfss	status,0,c
  4446  000C14  D005               	goto	i2l2173
  4447  000C16  5003               	movf	___awdiv@divisor,w,c
  4448  000C18  5E01               	subwf	___awdiv@dividend,f,c
  4449  000C1A  5004               	movf	___awdiv@divisor+1,w,c
  4450  000C1C  5A02               	subwfb	___awdiv@dividend+1,f,c
  4451  000C1E  8007               	bsf	___awdiv@quotient,0,c
  4452  000C20                     i2l2173:
  4453  000C20  90D8               	bcf	status,0,c
  4454  000C22  3204               	rrcf	___awdiv@divisor+1,f,c
  4455  000C24  3203               	rrcf	___awdiv@divisor,f,c
  4456  000C26  2E05               	decfsz	___awdiv@counter,f,c
  4457  000C28  D7ED               	goto	i2l2165
  4458  000C2A                     i2l2177:
  4459  000C2A  5006               	movf	___awdiv@sign,w,c
  4460  000C2C  B4D8               	btfsc	status,2,c
  4461  000C2E  D004               	goto	i2l2181
  4462  000C30  6C07               	negf	___awdiv@quotient,c
  4463  000C32  1E08               	comf	___awdiv@quotient+1,f,c
  4464  000C34  B0D8               	btfsc	status,0,c
  4465  000C36  2A08               	incf	___awdiv@quotient+1,f,c
  4466  000C38                     i2l2181:
  4467  000C38  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4468  000C3C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4469  000C40  0012               	return	
  4470  000C42                     __end_of___awdiv:
  4471                           	opt stack 0
  4472                           pclatu	equ	0xFFB
  4473                           pclath	equ	0xFFA
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           intcon	equ	0xFF2
  4481                           postinc0	equ	0xFEE
  4482                           fsr0h	equ	0xFEA
  4483                           fsr0l	equ	0xFE9
  4484                           wreg	equ	0xFE8
  4485                           postdec1	equ	0xFE5
  4486                           fsr1h	equ	0xFE2
  4487                           fsr1l	equ	0xFE1
  4488                           indf2	equ	0xFDF
  4489                           postinc2	equ	0xFDE
  4490                           postdec2	equ	0xFDD
  4491                           plusw2	equ	0xFDB
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _Receive *****************
  4497 ;; Defined at:
  4498 ;;		line 31 in file "communication.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      unsigned char 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1
  4512 ;;      Params:         0       0       0
  4513 ;;      Locals:         0       0       0
  4514 ;;      Temps:          0       0       0
  4515 ;;      Totals:         0       0       0
  4516 ;;Total ram usage:        0 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_Isr
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text24
  4526  000F88                     __ptext24:
  4527                           	opt stack 0
  4528  000F88                     _Receive:
  4529                           	opt stack 22
  4530                           
  4531                           ;communication.c: 32: if(RCSTA1bits.OERR == 1) {
  4532                           
  4533                           ;incstack = 0
  4534  000F88  A2AB               	btfss	4011,1,c	;volatile
  4535  000F8A  D004               	goto	i2l472
  4536                           
  4537                           ;communication.c: 33: RCSTA1bits.CREN = 0;
  4538  000F8C  98AB               	bcf	4011,4,c	;volatile
  4539                           
  4540                           ;communication.c: 34: RCSTA1bits.CREN = 1;
  4541  000F8E  88AB               	bsf	4011,4,c	;volatile
  4542                           
  4543                           ;communication.c: 35: overrun = 1;
  4544  000F90  0E01               	movlw	1
  4545  000F92  6E34               	movwf	_overrun,c
  4546  000F94                     i2l472:
  4547                           
  4548                           ;communication.c: 36: }
  4549                           ;communication.c: 37: return (RCREG1);
  4550  000F94  50AE               	movf	4014,w,c	;volatile
  4551  000F96  0012               	return	
  4552  000F98                     __end_of_Receive:
  4553                           	opt stack 0
  4554                           pclatu	equ	0xFFB
  4555                           pclath	equ	0xFFA
  4556                           tblptru	equ	0xFF8
  4557                           tblptrh	equ	0xFF7
  4558                           tblptrl	equ	0xFF6
  4559                           tablat	equ	0xFF5
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           postinc0	equ	0xFEE
  4564                           fsr0h	equ	0xFEA
  4565                           fsr0l	equ	0xFE9
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1h	equ	0xFE2
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           plusw2	equ	0xFDB
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           pclatu	equ	0xFFB
  4578                           pclath	equ	0xFFA
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           postinc0	equ	0xFEE
  4587                           fsr0h	equ	0xFEA
  4588                           fsr0l	equ	0xFE9
  4589                           wreg	equ	0xFE8
  4590                           postdec1	equ	0xFE5
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           plusw2	equ	0xFDB
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601                           	psect	rparam
  4602  0000                     pclatu	equ	0xFFB
  4603                           pclath	equ	0xFFA
  4604                           tblptru	equ	0xFF8
  4605                           tblptrh	equ	0xFF7
  4606                           tblptrl	equ	0xFF6
  4607                           tablat	equ	0xFF5
  4608                           prodh	equ	0xFF4
  4609                           prodl	equ	0xFF3
  4610                           intcon	equ	0xFF2
  4611                           postinc0	equ	0xFEE
  4612                           fsr0h	equ	0xFEA
  4613                           fsr0l	equ	0xFE9
  4614                           wreg	equ	0xFE8
  4615                           postdec1	equ	0xFE5
  4616                           fsr1h	equ	0xFE2
  4617                           fsr1l	equ	0xFE1
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           plusw2	equ	0xFDB
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626                           	psect	temp
  4627  000043                     btemp:
  4628                           	opt stack 0
  4629  000043                     	ds	1
  4630  0000                     int$flags	set	btemp
  4631                           pclatu	equ	0xFFB
  4632                           pclath	equ	0xFFA
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           postinc0	equ	0xFEE
  4641                           fsr0h	equ	0xFEA
  4642                           fsr0l	equ	0xFE9
  4643                           wreg	equ	0xFE8
  4644                           postdec1	equ	0xFE5
  4645                           fsr1h	equ	0xFE2
  4646                           fsr1l	equ	0xFE1
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           plusw2	equ	0xFDB
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    0
    Data        180
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      66
    BANK0           160     10      10
    BANK1           256      0     180

Pointer List with Targets:

    Write_Display_Byte@write_data	PTR unsigned char  size(2) Largest target is 7
		 -> pixels(COMRAM[7]), 

    Evaluate_Display@evaluate	PTR const unsigned char  size(2) Largest target is 4
		 -> signs(COMRAM[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    Set_Bits@bits	PTR const unsigned char  size(3) Largest target is 8191
		 -> ROM(CODE[8191]), STR_18(CODE[2]), STR_17(CODE[4]), STR_16(CODE[7]), 
		 -> STR_15(CODE[7]), STR_14(CODE[7]), STR_13(CODE[6]), STR_12(CODE[7]), 
		 -> STR_11(CODE[8]), STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[6]), 
		 -> STR_7(CODE[5]), STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[3]), 
		 -> STR_3(CODE[7]), 


Critical Paths under _main in COMRAM

    _Set_Display->_Evaluate_Signs
    _Evaluate_Signs->_Evaluate_Display
    _Evaluate_Display->_Set_Bits

Critical Paths under _Isr in COMRAM

    _Isr->___awdiv

Critical Paths under _main in BANK0

    _main->_Check_Buttons
    _Check_Buttons->_Del_Data
    _Del_Data->_Load_Data
    _Load_Data->_Set_Display
    _Set_Display->_Evaluate_Signs

Critical Paths under _Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   34000
                      _Check_Buttons
                   _Check_Detonators
                               _Init
                          _Load_Data
                        _Set_Display
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
                          _InitAnsel
                      _InitInterrupt
                  _InitMiscellaneous
                           _InitPort
                          _InitTimer
                   _InitTransmission
                           _InitTris
 ---------------------------------------------------------------------------------
 (2) _InitTris                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTransmission                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPort                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitMiscellaneous                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAnsel                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Check_Detonators                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Check_Buttons                                        2     2      0   18697
                                              8 BANK0      2     2      0
                           _Del_Data
                      _Delay_Routine
                          _Read_Data
                          _Save_Data
                        _Set_Display
 ---------------------------------------------------------------------------------
 (2) _Del_Data                                             1     1      0   11361
                                              7 BANK0      1     1      0
                      _Delay_Routine
                   _Evaluate_Display
                          _Load_Data
                          _Save_Data
 ---------------------------------------------------------------------------------
 (2) _Save_Data                                            3     0      3     592
                                             28 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Load_Data                                            2     2      0    8738
                                              5 BANK0      2     2      0
                      _Delay_Routine
                   _Evaluate_Display
                          _Read_Data
                        _Set_Display
 ---------------------------------------------------------------------------------
 (1) _Set_Display                                          4     1      3    6565
                                              1 BANK0      4     1      3
                   _Evaluate_Display
                     _Evaluate_Signs
                 _Write_Display_Byte
 ---------------------------------------------------------------------------------
 (2) _Write_Display_Byte                                   7     5      2     207
                                             28 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _Evaluate_Signs                                       3     1      2    2491
                                             41 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                   _Evaluate_Display
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             28 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _Evaluate_Display                                     5     3      2    1864
                                             36 COMRAM     5     3      2
                           _Set_Bits
 ---------------------------------------------------------------------------------
 (4) _Set_Bits                                             8     5      3    1494
                                             28 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (2) _Read_Data                                            5     3      2     111
                                             28 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Delay_Routine                                        3     3      0      68
                                             28 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Isr                                                 20    20      0     567
                                              8 COMRAM    20    20      0
                            _Receive
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) _Receive                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Check_Buttons
     _Del_Data
       _Delay_Routine
       _Evaluate_Display
         _Set_Bits
       _Load_Data
         _Delay_Routine
         _Evaluate_Display
           _Set_Bits
         _Read_Data
         _Set_Display
           _Evaluate_Display
             _Set_Bits
           _Evaluate_Signs
             _Evaluate_Display
               _Set_Bits
             ___lwmod
           _Write_Display_Byte
       _Save_Data
     _Delay_Routine
     _Read_Data
     _Save_Data
     _Set_Display
       _Evaluate_Display
         _Set_Bits
       _Evaluate_Signs
         _Evaluate_Display
           _Set_Bits
         ___lwmod
       _Write_Display_Byte
   _Check_Detonators
   _Init
     _InitAnsel
     _InitInterrupt
     _InitMiscellaneous
     _InitPort
     _InitTimer
     _InitTransmission
     _InitTris
   _Load_Data
     _Delay_Routine
     _Evaluate_Display
       _Set_Bits
     _Read_Data
     _Set_Display
       _Evaluate_Display
         _Set_Bits
       _Evaluate_Signs
         _Evaluate_Display
           _Set_Bits
         ___lwmod
       _Write_Display_Byte
   _Set_Display
     _Evaluate_Display
       _Set_Bits
     _Evaluate_Signs
       _Evaluate_Display
         _Set_Bits
       ___lwmod
     _Write_Display_Byte

 _Isr (ROOT)
   _Receive
   ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      B4       5       70.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      A       A       4        6.3%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2B      42       1       70.2%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100       6        0.0%
DATA                 0      0     100       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Dec 25 20:10:12 2016

      Evaluate_Display@evaluate 0025                              l90 0320                              l86 0264  
                            l96 03D0                    ___awdiv@sign 0006                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                             l102 047A                             l106 05C2  
                           l403 0C9E                             l315 0D22                             l318 0D4C  
                           l479 0E10                             l944 0D90                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000                             _Isr 0008                             _pin 0100  
                _Evaluate_Signs 0C42                             prod 000FF3                             wreg 000FE8  
             Set_Bits@Bitoutput 0024                      _TXSTA1bits 000FAC                    __CFG_LVP$OFF 000000  
                          ?_Isr 0001                            l2301 0828                            l2311 08A0  
                          l2303 0840                            l2305 0858                            l2313 08B2  
                          l2307 0870                            l2315 0948                            l2331 0D86  
                          l2323 0D66                            l2261 0A6A                            l2253 0A5A  
                          l2309 0888                            l2317 094A                            l2325 0D6E  
                          l2341 0C52                            l2501 0DD4                            l2263 0A6E  
                          l2255 0A5E                            l2271 0AC6                            l2327 0D72  
                          l2265 0A72                            l2257 0A62                            l2273 0AC8  
                          l2281 0738                            l2337 0C48                            l2433 096E  
                          l2371 0F26                            l2259 0A66                            l2291 07B0  
                          l2283 0750                            l2443 09A8                            l2603 04FE  
                          l2269 0A76                            l2293 07C8                            l2285 0768  
                          l2437 0978                            l2605 0512                            l2525 0286  
                          l2367 0F16                            l2295 07E0                            l2287 0780  
                          l2279 0720                            l2375 0CB6                            l2391 0CEE  
                          l2631 05E2                            l2297 07F8                            l2289 0798  
                          l2393 0CFA                            l2553 039E                            l2529 02EE  
                          l2299 0810                            l2387 0CE0                            l2491 0DB4  
                          l2549 0342                            l2495 0DBE                            l2639 062E  
                          l2567 0448                            l2663 0E9E                            l2593 04E8  
                          l2585 049A                            l2597 04F2                            l2589 04DE  
                          STR_1 0246                            STR_2 024A                            STR_3 0209  
                          STR_4 0243                            STR_5 022B                            STR_6 0225  
                          STR_7 023D                            STR_8 0231                            STR_9 021E  
                          u1380 08E6                            u1387 08DC                            u1857 0F1C  
                          _Init 0F32                            _main 0E96                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          btemp 0043                   __CFG_BORV$190 000000                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 01B8  
                 __CFG_IESO$OFF 000000                  Save_Data@store 001D              _Write_Display_Byte 0DDA  
                  ___param_bank 000010                   _InitInterrupt 0F98                           ??_Isr 0009  
               __end_of_Receive 0F98             ?_Write_Display_Byte 001D                    _BAUDCON1bits 000FB8  
                         ?_Init 0001                           ?_main 0001                 __end_of___awdiv 0C42  
                         _EEADR 000FA9                           STR_10 0242                           STR_11 0201  
                         STR_12 0210                           STR_13 0237                           STR_14 0217  
                         STR_15 0209                           STR_16 0209                           STR_17 020C  
                         STR_18 0229          __end_of_Evaluate_Signs 0CB0                 ___awdiv@divisor 0003  
             _InitMiscellaneous 0FA2                 __end_of___lwmod 0D9A                           i2l520 0076  
                         i2l521 0072                           i2l531 017C                           i2l472 0F94  
               ___awdiv@counter 0005                           _TMR1H 000FCF                           _TMR1L 000FCE  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTE 000F84                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISE 000F96                   __CFG_WRT0$OFF 000000  
      __end_of_InitTransmission 0F0E                   __CFG_WRT1$OFF 000000              ?_InitMiscellaneous 0001  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
              _Evaluate_Display 0718                  __CFG_EBTRB$OFF 000000                           _signs 003F  
            __CFG_MCLRE$EXTMCLR 000000            ??_Write_Display_Byte 001F                  __pbitbssCOMRAM 0210  
                __CFG_BOREN$OFF 000000             ??_InitMiscellaneous 001D                           tablat 000FF5  
                         plusw2 000FDB                __end_of_Del_Data 0DDA                           status 000FD8  
                ?_InitInterrupt 0001                 __initialization 0E5A                    __end_of_Init 0F50  
                  __end_of_main 0EC2                __end_of_InitPort 0F88                __end_of_InitTris 0F76  
        Set_Display@information 0061       __end_of_InitMiscellaneous 0FA8                          ??_Init 001D  
                 ??_Set_Display 002C                          ??_main 002C                __end_of_Set_Bits 0B0A  
               ?_Evaluate_Signs 002A                   __activetblptr 000002                          _EEDATA 000FA8  
                        _CCPR1H 000FBF                          _CCPR1L 000FBE                          _EECON2 000FA7  
              ___awdiv@dividend 0001                          _ANSELA 000F38                          _ANSELB 000F39  
                        _ANSELC 000F3A                          i2l2161 0BF8                          i2l2163 0C00  
                        i2l2155 0BE2                          i2l2243 0170                          i2l2181 0C38  
                        i2l2173 0C20                          i2l2165 0C04                          i2l2149 0BD2  
                        i2l2245 0172                          i2l2239 013C                          i2l2177 0C2A  
                __CFG_WDTEN$OFF 000000                          _RCREG1 000FAE              __size_of_Load_Data 00FC  
                        _OSCCON 000FD3              __size_of_InitAnsel 0014                          _SPBRG1 000FAF  
                        _SSP1IF 007CF3              __size_of_Read_Data 0040              __size_of_InitTimer 0028  
                        _TXREG1 000FAD                       ??_Receive 0001                  __CFG_XINST$OFF 000000  
                  _CCPTMRS0bits 000F49              __size_of_Save_Data 0050                       ??___awdiv 0005  
                     ??___lwmod 0021                          clear_0 0E62                ___awdiv@quotient 0007  
                        _pixels 0038          __size_of_Check_Buttons 04C8  Evaluate_Signs@evaluation_value 002A  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8             __end_of_Set_Display 0D08                 __CFG_HFOFST$OFF 000000  
          Isr@pixel_index_array 001A                      __accesstop 0060         __end_of__initialization 0E88  
               __CFG_PBADEN$OFF 000000                 ??_InitInterrupt 001D                   ___rparam_used 000001  
                __pcstackCOMRAM 0001       __size_of_Check_Detonators 0002                    __pidataBANK1 0B0A  
    __size_of_InitMiscellaneous 0006               __end_of_Load_Data 0A50               __end_of_InitAnsel 0F64  
             __end_of_Read_Data 0E5A               __end_of_InitTimer 0EEA                       ?_Del_Data 0001  
             __end_of_Save_Data 0D58              Isr@pixel_index_bit 001B                 __CFG_PLLCFG$OFF 000000  
                 _Check_Buttons 0250                       ?_InitPort 0001                       ?_InitTris 0001  
                     ?_Set_Bits 001D              __CFG_CCP2MX$PORTC1 000000        __end_of_Evaluate_Display 0954  
            __CFG_CCP3MX$PORTB5 000000                     _Set_Display 0CB0                      ??_Del_Data 002C  
        __size_of_Delay_Routine 0024               ?_InitTransmission 0001               __CFG_PRICLKEN$OFF 000000  
                       _SSP1BUF 000FC9              ??_InitTransmission 001D                  ?_Check_Buttons 0001  
                    ??_InitPort 001D                      ??_InitTris 001D                      ??_Set_Bits 0020  
               __CFG_PWRTEN$OFF 000000                         _Receive 0F88                         __Hparam 0000  
                       __Lparam 0000                Load_Data@counter 0066                         ___awdiv 0BBE  
              ??_Evaluate_Signs 002C                         ___lwmod 0D58                    __psmallconst 0200  
               __CFG_STVREN$OFF 000000                         __pcinit 0E5A                         __ramtop 0200  
                       __ptext0 0E96                         __ptext1 0F32                         __ptext2 0F64  
                       __ptext3 0EEA                         __ptext4 0EC2                         __ptext5 0F76  
                       __ptext6 0FA2                         __ptext7 0F98                         __ptext8 0F50  
                       __ptext9 0FA8                       _T1CONbits 000FCD                    __size_of_Isr 01B0  
               Set_Display@type 0064                       _T3CONbits 000FB1                         _overrun 0034  
          end_of_initialization 0E88     __size_of_Write_Display_Byte 0040                   __Lmediumconst 0000  
                 _Delay_Routine 0F0E                       _RCSTAbits 000FAB                _Check_Detonators 0FA8  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _TRISCbits 000F94                 ??_Check_Buttons 0068                  ?_Delay_Routine 0001  
                   _CCP1CONbits 000FBD                    Set_Bits@bits 001D             start_initialization 0E5A  
                     _Load_Data 0954                       _InitAnsel 0F50                    _ignite_ready 0210  
             __size_of_Del_Data 0040                     __end_of_Isr 01B8                       _Read_Data 0E1A  
                     _InitTimer 0EC2                Set_Bits@bitcount 0023                       _Save_Data 0D08  
             __size_of_InitPort 0012               __size_of_InitTris 0012           __end_of_InitInterrupt 0FA2  
             __size_of_Set_Bits 00BA               ?_Evaluate_Display 0025                     __pdataBANK1 0100  
            ??_Evaluate_Display 0027                  _slave_selected 0037                    ?_Set_Display 0061  
        Save_Data@store_address 001F                     __pbssCOMRAM 002C                      ?_Load_Data 0001  
                    ?_InitAnsel 0001                   __pcstackBANK0 0060                      ?_Read_Data 001D  
                    ?_InitTimer 0001                 ??_Delay_Routine 001D                      ?_Save_Data 001D  
                  _current_time 0031                _master_addressed 0211                        ?_Receive 0001  
     __size_of_InitTransmission 0024           Read_Data@read_address 0021                       __pintcode 0008  
                      ?___awdiv 0001                        ?___lwmod 001D                     __smallconst 0200  
      __end_of_Check_Detonators 0FAA                        _PIE1bits 000F9D                        i2u133_44 0122  
                      i2u133_45 011E                        i2u135_44 0152                        i2u135_45 014E  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1                __CFG_WDTPS$32768 000000  
                      _SSP1CON1 000FC6                        _SSP1STAT 000FC7                        _Del_Data 0D9A  
                   ??_Load_Data 0065                     ??_InitAnsel 001D                 _receive_counter 0036  
                   ??_Read_Data 001F                     ??_InitTimer 001D      __end_of_Write_Display_Byte 0E1A  
                     copy_data0 0E7C                        _InitPort 0F76                        _InitTris 0F64  
                   ??_Save_Data 0020                      _EECON1bits 000FA6                 Isr@search_index 001C  
                      _Set_Bits 0A50                    _pin_selected 0035                        __Hrparam 0000  
              __size_of_Receive 0010                        __Lrparam 0000               __CFG_P2BMX$PORTB5 000000  
              __size_of___awdiv 0084                __size_of___lwmod 0042            __size_of_Set_Display 0058  
       __size_of_Evaluate_Signs 006E                        __ptext10 0250                        __ptext11 0D9A  
                      __ptext20 0E1A                        __ptext12 0D08                        __ptext21 0F0E  
                      __ptext13 0954                        __ptext14 0CB0                        __ptext23 0BBE  
                      __ptext15 0DDA                        __ptext24 0F88                        __ptext16 0C42  
                      __ptext17 0D58                        __ptext18 0718                        __ptext19 0A50  
         __end_of_Check_Buttons 0718                Set_Display@value 0062                   __size_of_Init 001E  
                 __size_of_main 002C                        _received 002C                _InitTransmission 0EEA  
    Delay_Routine@delay_counter 001F                        _testflag 0212                        int$flags 0043  
          Evaluate_Display@size 0029    Write_Display_Byte@write_data 001D      Evaluate_Signs@valuecounter 0060  
                    _INTCONbits 000FF2       __size_of_Evaluate_Display 023C              Read_Data@data_read 001F  
                      intlevel2 0000                ___lwmod@dividend 001D       Write_Display_Byte@counter 0023  
                    _RCSTA1bits 000FAB                 _display_counter 0033                 Del_Data@counter 0067  
               ___lwmod@divisor 001F   Delay_Routine@delay_multiplyer 001E                 ___lwmod@counter 0021  
             __CFG_T3CMX$PORTC0 000000          __size_of_InitInterrupt 000A               ?_Check_Detonators 0001  
            ??_Check_Detonators 001D           __end_of_Delay_Routine 0F32               __CFG_FOSC$INTIO67 000000  
